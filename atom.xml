<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My blog</title>
  
  <subtitle>A personal blog</subtitle>
  <link href="https://a1smile.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://a1smile.github.io/blog/"/>
  <updated>2025-01-31T15:13:17.931Z</updated>
  <id>https://a1smile.github.io/blog/</id>
  
  <author>
    <name>代洪嵩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx使用</title>
    <link href="https://a1smile.github.io/blog/2025/01/31/Nginx%E4%BD%BF%E7%94%A8/"/>
    <id>https://a1smile.github.io/blog/2025/01/31/Nginx%E4%BD%BF%E7%94%A8/</id>
    <published>2025-01-31T15:12:47.000Z</published>
    <updated>2025-01-31T15:13:17.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx-使用"><a href="#Nginx-使用" class="headerlink" title="Nginx 使用"></a>Nginx 使用</h3><p>Nginx 是一个高性能的 HTTP 服务器和反向代理服务器，广泛用于负载均衡、静态资源服务和反向代理等场景。以下是 Nginx 的核心使用方法和配置。</p><hr><h3 id="Nginx-文件结构"><a href="#Nginx-文件结构" class="headerlink" title="Nginx 文件结构"></a>Nginx 文件结构</h3><p>Nginx 的典型文件结构如下（基于 Linux 系统）：</p><ul><li><strong>配置文件目录</strong>:<ul><li><code>/etc/nginx/</code>: 主配置目录。<ul><li><code>nginx.conf</code>: 主配置文件。</li><li><code>sites-available/</code>: 可用的虚拟主机配置。</li><li><code>sites-enabled/</code>: 启用的虚拟主机配置（通常是 <code>sites-available/</code> 的符号链接）。</li><li><code>conf.d/</code>: 额外的配置文件目录。</li></ul></li><li><code>/usr/local/nginx/conf/</code>: 如果从源码编译安装，配置文件可能在此目录。</li></ul></li><li><strong>日志文件目录</strong>:<ul><li><code>/var/log/nginx/</code>: 日志文件目录。<ul><li><code>access.log</code>: 访问日志。</li><li><code>error.log</code>: 错误日志。</li></ul></li></ul></li><li><strong>默认网站根目录</strong>:<ul><li><code>/usr/share/nginx/html/</code> 或 <code>/var/www/html/</code>: 默认的静态文件存放目录。</li></ul></li><li><strong>可执行文件</strong>:<ul><li><code>/usr/sbin/nginx</code> 或 <code>/usr/local/nginx/sbin/nginx</code>: Nginx 可执行文件。</li></ul></li></ul><hr><h3 id="Nginx-配置文件及编写规范"><a href="#Nginx-配置文件及编写规范" class="headerlink" title="Nginx 配置文件及编写规范"></a>Nginx 配置文件及编写规范</h3><h4 id="1-配置文件结构"><a href="#1-配置文件结构" class="headerlink" title="1. 配置文件结构"></a>1. 配置文件结构</h4><p>Nginx 配置文件采用层级结构，主要分为以下几个部分：</p><ul><li><strong>全局块</strong>: 配置全局生效的参数，如用户、工作进程数等。</li><li><strong>events 块</strong>: 配置网络连接相关的参数。</li><li><strong>http 块</strong>: 配置 HTTP 相关的参数，可以包含多个 <code>server</code> 块。</li><li><strong>server 块</strong>: 定义虚拟主机，每个 <code>server</code> 块对应一个域名或 IP。</li><li><strong>location 块</strong>: 定义请求的匹配规则和处理方式。</li></ul><h4 id="2-示例配置文件"><a href="#2-示例配置文件" class="headerlink" title="2. 示例配置文件"></a>2. 示例配置文件</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局块</span></span><br><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment"># events 块</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 块</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个 server 块</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义一个 location 块</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /var/www/html;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向代理配置</span></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend_server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写规范"><a href="#3-编写规范" class="headerlink" title="3. 编写规范"></a>3. 编写规范</h4><ul><li>使用 <code>#</code> 添加注释。</li><li>每个指令以分号 <code>;</code> 结尾。</li><li>使用 <code>&#123;&#125;</code> 包裹块级配置。</li><li>使用 <code>include</code> 引入其他配置文件。</li><li>配置文件修改后，使用 <code>nginx -t</code> 测试语法是否正确。</li></ul><hr><h3 id="Nginx-反向代理配置"><a href="#Nginx-反向代理配置" class="headerlink" title="Nginx 反向代理配置"></a>Nginx 反向代理配置</h3><p>反向代理是 Nginx 的核心功能之一，用于将客户端请求转发到后端服务器。</p><h4 id="1-基本反向代理配置"><a href="#1-基本反向代理配置" class="headerlink" title="1. 基本反向代理配置"></a>1. 基本反向代理配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend_server;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>proxy_pass</code>: 指定后端服务器的地址。</li><li><code>proxy_set_header</code>: 设置请求头，确保后端服务器能获取真实的客户端信息。</li></ul><h4 id="2-负载均衡配置"><a href="#2-负载均衡配置" class="headerlink" title="2. 负载均衡配置"></a>2. 负载均衡配置</h4><p>Nginx 可以作为负载均衡器，将请求分发到多个后端服务器。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.101</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.102</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.103</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>upstream</code>: 定义后端服务器组。</li><li><code>server</code>: 定义后端服务器的地址。</li></ul><hr><h3 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h3><h4 id="1-启动-Nginx"><a href="#1-启动-Nginx" class="headerlink" title="1. 启动 Nginx"></a>1. 启动 Nginx</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> nginx  <span class="comment"># Linux</span></span><br><span class="line">sudo brew services <span class="literal">start</span> nginx  <span class="comment"># macOS</span></span><br><span class="line"><span class="literal">start</span> nginx  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h4 id="2-停止-Nginx"><a href="#2-停止-Nginx" class="headerlink" title="2. 停止 Nginx"></a>2. 停止 Nginx</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="literal">stop</span> nginx  <span class="comment"># Linux</span></span><br><span class="line">sudo brew services <span class="literal">stop</span> nginx  <span class="comment"># macOS</span></span><br><span class="line">nginx -s <span class="literal">stop</span>  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h4 id="3-重启-Nginx"><a href="#3-重启-Nginx" class="headerlink" title="3. 重启 Nginx"></a>3. 重启 Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx  <span class="comment"># Linux</span></span><br><span class="line"><span class="built_in">sudo</span> brew services restart nginx  <span class="comment"># macOS</span></span><br><span class="line">nginx -s reload  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h4 id="4-重载配置文件"><a href="#4-重载配置文件" class="headerlink" title="4. 重载配置文件"></a>4. 重载配置文件</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">reload</span> nginx  <span class="comment"># Linux</span></span><br><span class="line">sudo brew services <span class="keyword">reload</span> nginx  <span class="comment"># macOS</span></span><br><span class="line">nginx -s <span class="keyword">reload</span>  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h4 id="5-测试配置文件"><a href="#5-测试配置文件" class="headerlink" title="5. 测试配置文件"></a>5. 测试配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br></pre></td></tr></table></figure><h4 id="6-查看-Nginx-版本"><a href="#6-查看-Nginx-版本" class="headerlink" title="6. 查看 Nginx 版本"></a>6. 查看 Nginx 版本</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx</span> -v  <span class="comment"># 查看版本</span></span><br><span class="line">nginx -V  <span class="comment"># 查看版本和编译参数</span></span><br></pre></td></tr></table></figure><h4 id="7-查看运行状态"><a href="#7-查看运行状态" class="headerlink" title="7. 查看运行状态"></a>7. 查看运行状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status nginx  <span class="comment"># Linux</span></span><br><span class="line"><span class="built_in">sudo</span> brew services list  <span class="comment"># macOS</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Nginx-使用&quot;&gt;&lt;a href=&quot;#Nginx-使用&quot; class=&quot;headerlink&quot; title=&quot;Nginx 使用&quot;&gt;&lt;/a&gt;Nginx 使用&lt;/h3&gt;&lt;p&gt;Nginx 是一个高性能的 HTTP 服务器和反向代理服务器，广泛用于负载均衡、静态资源服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>maven打包</title>
    <link href="https://a1smile.github.io/blog/2025/01/31/maven%E6%89%93%E5%8C%85/"/>
    <id>https://a1smile.github.io/blog/2025/01/31/maven%E6%89%93%E5%8C%85/</id>
    <published>2025-01-31T15:12:35.000Z</published>
    <updated>2025-01-31T15:13:36.450Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在 Maven 打包时跳过单元测试的几种常用方法如下：</strong></p><hr><h1 id="1-命令行参数"><a href="#1-命令行参数" class="headerlink" title="1. 命令行参数"></a>1. <strong>命令行参数</strong></h1><p>在运行 <code>mvn package</code> 时添加参数：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="keyword">package</span> <span class="title">-DskipTests</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：编译测试代码，但跳过执行单元测试。</li><li><strong>注意</strong>：测试代码会被编译，但不会运行。</li></ul><p>或者：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="keyword">package</span> -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：完全跳过测试代码的编译和执行。</li><li><strong>区别</strong>：比 <code>-DskipTests</code> 更彻底，适用于临时需要快速打包的场景。</li></ul><hr><h1 id="2-在-pom-xml-中配置（永久生效）"><a href="#2-在-pom-xml-中配置（永久生效）" class="headerlink" title="2. 在 pom.xml 中配置（永久生效）"></a>2. <strong>在 <code>pom.xml</code> 中配置（永久生效）</strong></h1><p>在项目的 <code>pom.xml</code> 中添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.test.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.test.skip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或针对 Surefire 插件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>适用场景</strong>：需要长期禁用测试（不推荐，仅限特殊场景）。</li></ul><hr><h1 id="3-Maven-生命周期跳过测试"><a href="#3-Maven-生命周期跳过测试" class="headerlink" title="3. Maven 生命周期跳过测试"></a>3. <strong>Maven 生命周期跳过测试</strong></h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="keyword">package</span> <span class="title">-Dskip</span></span><br></pre></td></tr></table></figure><ul><li><strong>说明</strong>：跳过整个测试生命周期（较少用）。</li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>临时跳过测试</strong>：优先使用 <code>mvn package -DskipTests</code>。</li><li><strong>彻底跳过编译和执行</strong>：用 <code>-Dmaven.test.skip=true</code>。</li><li><strong>生产环境慎用</strong>：确保跳过测试是安全的，测试是保障质量的关键步骤！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;在 Maven 打包时跳过单元测试的几种常用方法如下：&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1-命令行参数&quot;&gt;&lt;a href=&quot;#1-命令行参数&quot; class=&quot;headerlink&quot; title=&quot;1. 命令行参数&quot;&gt;&lt;/a&gt;1. &lt;str</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git使用</title>
    <link href="https://a1smile.github.io/blog/2025/01/31/Git%E4%BD%BF%E7%94%A8/"/>
    <id>https://a1smile.github.io/blog/2025/01/31/Git%E4%BD%BF%E7%94%A8/</id>
    <published>2025-01-31T15:12:18.000Z</published>
    <updated>2025-01-31T15:13:52.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h1><h2 id="一、Git-初始化配置"><a href="#一、Git-初始化配置" class="headerlink" title="一、Git 初始化配置"></a>一、Git 初始化配置</h2><p>配置用户信息（<strong>必须步骤</strong>，否则无法提交代码）：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置（适用于所有仓库）</span></span><br><span class="line">git config --global <span class="keyword">user</span>.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">git config --global <span class="keyword">user</span>.email <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部配置（仅针对当前仓库）</span></span><br><span class="line">git config <span class="keyword">user</span>.name <span class="string">&quot;项目专用名字&quot;</span></span><br><span class="line">git config <span class="keyword">user</span>.email <span class="string">&quot;项目专用邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>常用附加配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认编辑器为 VS Code</span></span><br><span class="line">git config <span class="params">--global</span> core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有配置项</span></span><br><span class="line">git config <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建命令别名（例如用 `git co` 代替 `git checkout`）</span></span><br><span class="line">git config <span class="params">--global</span> <span class="keyword">alias</span>.co checkout</span><br></pre></td></tr></table></figure><hr><h2 id="二、Git-克隆-拉取-提交-推送"><a href="#二、Git-克隆-拉取-提交-推送" class="headerlink" title="二、Git 克隆 / 拉取 / 提交 / 推送"></a>二、Git 克隆 / 拉取 / 提交 / 推送</h2><ol><li><p><strong>克隆远程仓库</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/用户名/仓库名.git</span><br><span class="line"><span class="comment"># 克隆到指定目录</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/用户名/仓库名.git 目录名</span><br></pre></td></tr></table></figure></li><li><p><strong>拉取远程更新</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取并自动合并（常用）</span></span><br><span class="line">git pull <span class="keyword">origin </span>分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先获取更新，再手动合并/变基</span></span><br><span class="line">git fetch <span class="keyword">origin </span>       <span class="comment"># 下载远程更新</span></span><br><span class="line">git merge <span class="keyword">origin/main </span>  <span class="comment"># 合并到当前分支</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">git rebase <span class="keyword">origin/main </span> <span class="comment"># 变基操作（重写提交历史）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>提交代码到本地仓库</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .                <span class="meta"># 添加所有修改</span></span><br><span class="line">git <span class="keyword">add</span> 文件名           <span class="meta"># 添加特定文件</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span>  <span class="meta"># 提交到本地仓库</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改上一次提交（未推送时）</span></span><br><span class="line">git <span class="keyword">add</span> 漏掉的文件</span><br><span class="line">git commit --amend       <span class="meta"># 进入编辑器修改提交信息</span></span><br></pre></td></tr></table></figure></li><li><p><strong>推送代码到远程仓库</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> 分支名</span><br><span class="line"></span><br><span class="line"># 首次推送需关联远程分支</span><br><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> 分支名</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、Git-提交规范（参考-Angular-规范）"><a href="#三、Git-提交规范（参考-Angular-规范）" class="headerlink" title="三、Git 提交规范（参考 Angular 规范）"></a>三、Git 提交规范（参考 Angular 规范）</h2><p><strong>提交格式</strong>：<br><code>&lt;类型&gt;(&lt;作用域&gt;): &lt;主题&gt;</code><br><code>&lt;空行&gt;</code><br><code>&lt;正文&gt;</code><br><code>&lt;空行&gt;</code><br><code>&lt;脚注&gt;</code></p><p><strong>示例</strong>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">feat</span><span class="params">(用户管理)</span></span>: 新增用户注册功能</span><br><span class="line"></span><br><span class="line">- 添加手机号验证接口</span><br><span class="line">- 实现注册表单提交逻辑</span><br><span class="line"></span><br><span class="line">Closes <span class="number">#123</span></span><br></pre></td></tr></table></figure><p><strong>常用类型</strong>：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>feat</code></td><td style="text-align:left">新功能</td></tr><tr><td style="text-align:left"><code>fix</code></td><td style="text-align:left">修复 bug</td></tr><tr><td style="text-align:left"><code>docs</code></td><td style="text-align:left">文档更新</td></tr><tr><td style="text-align:left"><code>style</code></td><td style="text-align:left">代码格式调整（空格、分号等，不影响功能）</td></tr><tr><td style="text-align:left"><code>refactor</code></td><td style="text-align:left">重构代码（非功能修改）</td></tr><tr><td style="text-align:left"><code>test</code></td><td style="text-align:left">添加或修改测试用例</td></tr><tr><td style="text-align:left"><code>chore</code></td><td style="text-align:left">构建流程或工具变动（如依赖更新）</td></tr><tr><td style="text-align:left"><code>perf</code></td><td style="text-align:left">性能优化</td></tr></tbody></table><p><strong>规范要点</strong>：</p><ol><li>主题行不超过 50 字，正文每行不超过 72 字符</li><li>使用祈使语气（如 “add” 而非 “added” 或 “adds”）</li><li>关联 Issue 或任务编号（例如 <code>Closes #123</code>）</li></ol><hr><h2 id="四、其他实用命令"><a href="#四、其他实用命令" class="headerlink" title="四、其他实用命令"></a>四、其他实用命令</h2><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left">查看状态</td><td style="text-align:left"><code>git status</code></td></tr><tr><td style="text-align:left">查看提交历史</td><td style="text-align:left"><code>git log --oneline --graph</code></td></tr><tr><td style="text-align:left">撤销工作区修改</td><td style="text-align:left"><code>git restore 文件名</code></td></tr><tr><td style="text-align:left">创建新分支</td><td style="text-align:left"><code>git branch 分支名</code></td></tr><tr><td style="text-align:left">切换分支</td><td style="text-align:left"><code>git checkout 分支名</code></td></tr><tr><td style="text-align:left">合并分支</td><td style="text-align:left"><code>git merge 分支名</code></td></tr><tr><td style="text-align:left">删除远程分支</td><td style="text-align:left"><code>git push origin --delete 分支名</code></td></tr></tbody></table><hr><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ol><li><strong>推送前先拉取</strong>：避免远程有更新导致冲突</li><li><strong>频繁提交</strong>：小步提交便于回滚和代码审查</li><li><strong>合理使用 <code>.gitignore</code></strong>：忽略编译文件、日志、敏感信息等</li><li><strong>谨慎修改历史</strong>：已推送的提交避免使用 <code>git commit --amend</code> 或 <code>git rebase</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-使用&quot;&gt;&lt;a href=&quot;#Git-使用&quot; class=&quot;headerlink&quot; title=&quot;Git 使用&quot;&gt;&lt;/a&gt;Git 使用&lt;/h1&gt;&lt;h2 id=&quot;一、Git-初始化配置&quot;&gt;&lt;a href=&quot;#一、Git-初始化配置&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://a1smile.github.io/blog/2025/01/18/docker/"/>
    <id>https://a1smile.github.io/blog/2025/01/18/docker/</id>
    <published>2025-01-18T15:03:14.000Z</published>
    <updated>2025-01-18T15:32:01.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>镜像与容器</p><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用<strong>镜像(image)</strong>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为<strong>容器(container)</strong>。</p><p><strong>镜像仓库：</strong>存储和管理镜像的平台，Docker官方维护的一个公共仓库：Docker Hub</p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>Dcoker最常见的命令就是操作就镜像、容器的命令</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20250117153209558.png" alt="image-20250117153209558"></p><table><thead><tr><th>docker命令</th><th>描述</th></tr></thead><tbody><tr><td>docker pull</td><td>从镜像仓库拉取到本地镜像</td></tr><tr><td>docker push</td><td>推送镜像到DockerRegistry</td></tr><tr><td>docker images</td><td>查看本地所有镜像</td></tr><tr><td>docker rmi</td><td>删除本地镜像</td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td></tr><tr><td>docker stop</td><td>停止指定容器</td></tr><tr><td>docker start</td><td>启动指定容器</td></tr><tr><td>docker ps</td><td>查看docker的正在运行的容器  -a:展示所有容器</td></tr><tr><td>docker rm</td><td>删除指定容器</td></tr><tr><td>docker logs</td><td>查看docker运行日志  -f：持续查看日志</td></tr><tr><td>docker exec</td><td>进入到容器内部，进行修改容器内的内容  -it+名字+bash：添加一个可交互的终端。exit：退出</td></tr><tr><td>docker bulid</td><td>创建自定义的镜像</td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td></tr></tbody></table><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="attribute">--restart</span>=always [容器名/容器id]</span><br></pre></td></tr></table></figure><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a><strong>演示案例</strong>：</h3><p>查看DCokerHub，拉取Nginx镜像，创建并运行Nginx容器</p><p>需求：</p><ul><li>在DCokerHub中搜索Nginx镜像，查看镜像的名称</li><li>拉取Nginx镜像</li><li>查看本地镜像列表</li><li>创建并运行Nginx容器</li><li>查看容器</li><li>停止容器</li><li>再次启动容器</li><li>进入Nginx容器</li><li>删除容器</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第2步，拉取Nginx镜像</span></span><br><span class="line"><span class="language-xml">docker pull nginx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第3步，查看镜像</span></span><br><span class="line"><span class="language-xml">docker images</span></span><br><span class="line"><span class="language-xml"># 结果如下：</span></span><br><span class="line"><span class="language-xml">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span></span><br><span class="line"><span class="language-xml">nginx        latest    605c77e624dd   16 months ago   141MB</span></span><br><span class="line"><span class="language-xml">mysql        latest    3218b38490ce   17 months ago   516MB</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第4步，创建并允许Nginx容器</span></span><br><span class="line"><span class="language-xml">docker run -d --name nginx -p 80:80 nginx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第5步，查看运行中容器</span></span><br><span class="line"><span class="language-xml">docker ps</span></span><br><span class="line"><span class="language-xml"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line"><span class="language-xml">docker ps --format &quot;table </span><span class="template-variable">&#123;&#123;<span class="name">.ID</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Image</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Ports</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Status</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Names</span>&#125;&#125;</span><span class="language-xml">&quot;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第7步，停止容器</span></span><br><span class="line"><span class="language-xml">docker stop nginx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第8步，查看所有容器</span></span><br><span class="line"><span class="language-xml">docker ps -a --format &quot;table </span><span class="template-variable">&#123;&#123;<span class="name">.ID</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Image</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Ports</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Status</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Names</span>&#125;&#125;</span><span class="language-xml">&quot;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第9步，再次启动nginx容器</span></span><br><span class="line"><span class="language-xml">docker start nginx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第10步，再次查看容器</span></span><br><span class="line"><span class="language-xml">docker ps --format &quot;table </span><span class="template-variable">&#123;&#123;<span class="name">.ID</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Image</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Ports</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Status</span>&#125;&#125;</span><span class="language-xml">\t</span><span class="template-variable">&#123;&#123;<span class="name">.Names</span>&#125;&#125;</span><span class="language-xml">&quot;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第11步，查看容器详细信息</span></span><br><span class="line"><span class="language-xml">docker inspect nginx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line"><span class="language-xml">docker exec -it nginx bash</span></span><br><span class="line"><span class="language-xml"># 或者，可以进入MySQL</span></span><br><span class="line"><span class="language-xml">docker exec -it mysql mysql -uroot -p</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 第13步，删除容器</span></span><br><span class="line"><span class="language-xml">docker rm nginx</span></span><br><span class="line"><span class="language-xml"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line"><span class="language-xml">docker rm -f nginx</span></span><br></pre></td></tr></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>给常用Docker命令起别名，方便我们访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让Nginx代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p><p><strong>数据卷（volume）</strong>是一个<strong>虚拟目录</strong>，是<strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有 两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20250117165816320.png" alt="image-20250117165816320"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<span class="regexp">/数据卷名/</span>_data。</span><br><span class="line"></span><br><span class="line">为什么不让容器目录直接指向宿主机目录呢？</span><br><span class="line">- 因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</span><br><span class="line">- 但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</span><br><span class="line"></span><br><span class="line">不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也允许让容器直接与宿主机目录挂载而不使用数据卷。</span><br></pre></td></tr></table></figure><h3 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h3><p>数据卷的相关命令</p><table><thead><tr><th style="text-align:left"><strong>命令</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">docker volume create</td><td style="text-align:left">创建数据卷</td></tr><tr><td style="text-align:left">docker volume ls</td><td style="text-align:left">查看所有数据卷</td></tr><tr><td style="text-align:left">docker volume rm</td><td style="text-align:left">删除指定数据卷</td></tr><tr><td style="text-align:left">docker volume inspect</td><td style="text-align:left">查看某个数据卷的详情</td></tr><tr><td style="text-align:left">docker volume prune</td><td style="text-align:left">清除数据卷</td></tr></tbody></table><p>注意：</p><ul><li>容器与数据卷的挂载要在<strong>创建容器时</strong>配置，对于创建好的容器，是不能设置数据卷的。在执行docker run命令时，使用<strong>-v 数据卷:容器内目录</strong>可以完成数据卷挂载。</li><li><strong>创建容器的过程中，如果挂载了数据卷且数据卷不存在，数据卷会自动创建</strong>。</li></ul><h4 id="演示案例1"><a href="#演示案例1" class="headerlink" title="演示案例1"></a>演示案例1</h4><p>利用Nginx容器部署静态资源</p><p>需求：</p><ul><li>创建Nginx容器，修改nginx容器内的html目录下的index.html文件内容</li><li>将静态资源部署到nginx的html目录</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run -d --name nginx -p <span class="number">80</span>:<span class="number">80</span> -v html:<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     <span class="number">29524</span>ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span><br><span class="line">local     html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">ll <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/html/</span>_data</span><br><span class="line"><span class="comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">497</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> <span class="number">50</span>x.html</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">615</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line">cd <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/html/</span>_data</span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开页面，查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker exec -it nginx bash</span><br></pre></td></tr></table></figure><h4 id="演示案例2"><a href="#演示案例2" class="headerlink" title="演示案例2"></a>演示案例2</h4><p>mysql容器的数据挂载</p><p>需求：</p><ul><li>查看mysql容器，判断是否有数据卷挂载</li><li>基于宿主机目录实现MySQL数据目录、配置文件、初始化脚本的挂载（查阅官方镜像文档）</li></ul><h5 id="MySQL的匿名数据卷"><a href="#MySQL的匿名数据卷" class="headerlink" title="MySQL的匿名数据卷"></a>MySQL的匿名数据卷</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看MySQL容器详细信息</span></span><br><span class="line">docker <span class="keyword">inspect </span>mysql</span><br><span class="line"><span class="comment"># 关注其中.Config.Volumes部分和.Mounts部分</span></span><br></pre></td></tr></table></figure><p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">//</span> <span class="string">...</span> 略</span><br><span class="line">    <span class="string">&quot;Volumes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/var/lib/mysql&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">//</span> <span class="string">...</span> 略</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的<code>.Mounts</code>部分：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/mysql&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的MySQL的data文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/</span>_data</span><br></pre></td></tr></table></figure><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面</p><h3 id="挂载本地目录或文件"><a href="#挂载本地目录或文件" class="headerlink" title="挂载本地目录或文件"></a>挂载本地目录或文件</h3><p>数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在执行docker run命令时：</span><br><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line"><span class="literal">-</span>v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line"><span class="literal">-</span>v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v mysql:<span class="regexp">/var/</span>lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v .<span class="regexp">/mysql:/</span>var<span class="regexp">/lib/my</span>sql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><h5 id="删除并重新创建mysql容器，并完成本地目录挂载："><a href="#删除并重新创建mysql容器，并完成本地目录挂载：" class="headerlink" title="删除并重新创建mysql容器，并完成本地目录挂载："></a>删除并重新创建mysql容器，并完成本地目录挂载：</h5><ul><li><p>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</p></li><li><p>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</p></li><li><p>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除原来的MySQL容器</span></span><br><span class="line">docker rm -f mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入root目录</span></span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行新mysql容器，挂载本地目录</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span><br><span class="line">ls -l mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf</span><br><span class="line">drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data</span><br><span class="line">drwxr-xr-x. 2 root    root   23 5月  19 15:11 init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line">ls -l data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看MySQL容器内数据</span></span><br><span class="line"><span class="comment"># 5.1.进入MySQL</span></span><br><span class="line">docker exec -it mysql mysql -uroot -p123</span><br><span class="line"><span class="comment"># 5.2.查看编码表</span></span><br><span class="line">show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"><span class="comment"># 5.3.结果，发现编码是utf8mb4没有问题</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value                          </span>|</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">|<span class="string"> character_set_client     </span>|<span class="string"> utf8mb4                        </span>|</span><br><span class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8mb4                        </span>|</span><br><span class="line">|<span class="string"> character_set_database   </span>|<span class="string"> utf8mb4                        </span>|</span><br><span class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                         </span>|</span><br><span class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8mb4                        </span>|</span><br><span class="line">|<span class="string"> character_set_server     </span>|<span class="string"> utf8mb4                        </span>|</span><br><span class="line">|<span class="string"> character_set_system     </span>|<span class="string"> utf8mb3                        </span>|</span><br><span class="line">|<span class="string"> character_sets_dir       </span>|<span class="string"> /usr/share/mysql-8.0/charsets/ </span>|</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看数据</span></span><br><span class="line"><span class="comment"># 6.1.查看数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 结果，hmall是黑马商城数据库</span></span><br><span class="line">+--------------------+</span><br><span class="line">|<span class="string"> Database           </span>|</span><br><span class="line">+--------------------+</span><br><span class="line">|<span class="string"> hmall              </span>|</span><br><span class="line">|<span class="string"> information_schema </span>|</span><br><span class="line">|<span class="string"> mysql              </span>|</span><br><span class="line">|<span class="string"> performance_schema </span>|</span><br><span class="line">|<span class="string"> sys                </span>|</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"><span class="comment"># 6.2.切换到hmall数据库</span></span><br><span class="line">use hmall;</span><br><span class="line"><span class="comment"># 6.3.查看表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">+-----------------+</span><br><span class="line">|<span class="string"> Tables_in_hmall </span>|</span><br><span class="line">+-----------------+</span><br><span class="line">|<span class="string"> address         </span>|</span><br><span class="line">|<span class="string"> cart            </span>|</span><br><span class="line">|<span class="string"> item            </span>|</span><br><span class="line">|<span class="string"> order           </span>|</span><br><span class="line">|<span class="string"> order_detail    </span>|</span><br><span class="line">|<span class="string"> order_logistics </span>|</span><br><span class="line">|<span class="string"> pay_order       </span>|</span><br><span class="line">|<span class="string"> user            </span>|</span><br><span class="line">+-----------------+</span><br><span class="line"><span class="comment"># 6.4.查看address表数据</span></span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> user_id </span>|<span class="string"> province </span>|<span class="string"> city   </span>|<span class="string"> town     </span>|<span class="string"> mobile      </span>|<span class="string"> street        </span>|<span class="string"> contact   </span>|<span class="string"> is_default </span>|<span class="string"> notes </span>|</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">|<span class="string"> 59 </span>|<span class="string">       1 </span>|<span class="string"> 北京     </span>|<span class="string"> 北京   </span>|<span class="string"> 朝阳区    </span>|<span class="string"> 13900112222 </span>|<span class="string"> 金燕龙办公楼   </span>|<span class="string"> 李佳诚    </span>|<span class="string"> 0          </span>|<span class="string"> NULL  </span>|</span><br><span class="line">|<span class="string"> 60 </span>|<span class="string">       1 </span>|<span class="string"> 北京     </span>|<span class="string"> 北京   </span>|<span class="string"> 朝阳区    </span>|<span class="string"> 13700221122 </span>|<span class="string"> 修正大厦       </span>|<span class="string"> 李佳红    </span>|<span class="string"> 0          </span>|<span class="string"> NULL  </span>|</span><br><span class="line">|<span class="string"> 61 </span>|<span class="string">       1 </span>|<span class="string"> 上海     </span>|<span class="string"> 上海   </span>|<span class="string"> 浦东新区  </span>|<span class="string"> 13301212233 </span>|<span class="string"> 航头镇航头路   </span>|<span class="string"> 李佳星    </span>|<span class="string"> 1          </span>|<span class="string"> NULL  </span>|</span><br><span class="line">|<span class="string"> 63 </span>|<span class="string">       1 </span>|<span class="string"> 广东     </span>|<span class="string"> 佛山   </span>|<span class="string"> 永春      </span>|<span class="string"> 13301212233 </span>|<span class="string"> 永春武馆       </span>|<span class="string"> 李晓龙    </span>|<span class="string"> 0          </span>|<span class="string"> NULL  </span>|</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><p>镜像就是包含了应用程序、程序设计的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><ul><li><p><code>`</code><br>部署一个Java应用的步骤：</p><ul><li>1.准备一个Linux服务器</li><li>2.安装JRE并配置环境变量</li><li>3.拷贝jar包</li><li>4.运行jar包<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">```</span></span><br><span class="line">  构建一个Java镜像的步骤：</span><br><span class="line">  <span class="bullet">-</span> <span class="string">1.准备一个Linux运行环境</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">2.安装JRE并配置环境变量</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">3.拷贝jar包</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">4.编写运行脚本</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：<img src="D:\学习资料\实验室培训\运维\image\image-20250118204440518.png" alt="image-20250118204440518"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">镜像结构</span><br><span class="line">入口（Entrypoint）</span><br><span class="line">镜像运行入口，一般是程序启动的脚本和参数</span><br><span class="line">层（Layer）</span><br><span class="line">在<span class="keyword">Baselmage基础上添加安装包、依赖、配置等，每次操作都形成新的一层</span></span><br><span class="line"><span class="keyword"></span>基础镜像（<span class="keyword">Baselmage）</span></span><br><span class="line"><span class="keyword"></span>应用依赖的系统函数库、环境、配置、文件等</span><br></pre></td></tr></table></figure><p>分层好处：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>可以共享一些基础镜像</span><br><span class="line"><span class="bullet">- </span>可以分层优化</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令</strong>（Instruction），用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下：</p><table><thead><tr><th style="text-align:left"><strong>指令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>FROM</strong></td><td style="text-align:left">指定基础镜像</td><td style="text-align:left"><code>FROM centos:6</code></td></tr><tr><td style="text-align:left"><strong>ENV</strong></td><td style="text-align:left">设置环境变量，可在后面指令使用</td><td style="text-align:left"><code>ENV key value</code></td></tr><tr><td style="text-align:left"><strong>COPY</strong></td><td style="text-align:left">拷贝本地文件到镜像的指定目录</td><td style="text-align:left"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td style="text-align:left"><strong>RUN</strong></td><td style="text-align:left">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:left"><code>RUN yum install gcc</code></td></tr><tr><td style="text-align:left"><strong>EXPOSE</strong></td><td style="text-align:left">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:left">EXPOSE 8080</td></tr><tr><td style="text-align:left"><strong>ENTRYPOINT</strong></td><td style="text-align:left">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:left">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>对应语法的官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>作用：Dockerfile就是利用固定的指令来描述镜像的结构和构建过程，这样Docker才可以依次来构建镜像</p><p><strong>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，会很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>当Dockerfile文件写好以后，就可以利用命令来构建镜像了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="attribute">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line"><span class="attribute">docker</span> build -t docker-demo:<span class="number">1</span>.<span class="number">0</span> .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><p><code>docker build</code>: 就是构建一个docker镜像</p></li><li><p><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</p></li><li><p><code>.</code> : (前面有个空格)最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接指定Dockerfile目录</span></span><br><span class="line"><span class="attribute">docker</span> build -t docker-demo:<span class="number">1</span>.<span class="number">0</span> /root/demo</span><br></pre></td></tr></table></figure></li></ul><p>结果:</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20250118212643856.png" alt="image-20250118212643856" style="zoom:50%;" /></p><p>查看镜像列表：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line"><span class="attribute">docker</span> images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="attribute">REPOSITORY</span>    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line"><span class="attribute">docker</span>-demo   <span class="number">1</span>.<span class="number">0</span>       d6ab0b9e64b9   <span class="number">27</span> minutes ago   <span class="number">327</span>MB</span><br><span class="line"><span class="attribute">nginx</span>         latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago    <span class="number">141</span>MB</span><br><span class="line"><span class="attribute">mysql</span>         latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago    <span class="number">516</span>MB</span><br></pre></td></tr></table></figure><p>然后尝试运行该镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建并运行容器</span></span><br><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8080:8080 docker-demo:1.0</span><br><span class="line"><span class="comment"># 2.查看容器</span></span><br><span class="line">dps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</span><br><span class="line">78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   <span class="built_in">dd</span></span><br><span class="line">f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.访问</span></span><br><span class="line">curl localhost:8080/hello/count</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。，我们的容器之间能否互相访问呢？</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect <span class="attribute">--format</span>=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker exec -it dd bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">ping </span>172.17.0.2</span><br><span class="line"><span class="comment"># 结果</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">PING </span>172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.2: <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.053 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.2: <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.059 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.0.2: <span class="attribute">icmp_seq</span>=3 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.058 ms</span><br></pre></td></tr></table></figure><p>发现可以互联，没有问题</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><p>加入自定义网络的容器才可以通过容器名互相访问，Docker的网络操作命令如下：</p><table><thead><tr><th style="text-align:left"><strong>命令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td style="text-align:left">docker network create</td><td style="text-align:left">创建一个网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td style="text-align:left">docker network ls</td><td style="text-align:left">查看所有网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network rm</td><td style="text-align:left">删除指定网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network prune</td><td style="text-align:left">清除未使用的网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network connect</td><td style="text-align:left">使指定容器连接加入某网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network disconnect</td><td style="text-align:left">使指定容器连接离开某网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td style="text-align:left">docker network inspect</td><td style="text-align:left">查看网络详细信息</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ip addr</span></span><br></pre></td></tr></table></figure><ul><li>可以看到虚拟机上的所有网卡</li></ul><h5 id="演示案例：自定义网络"><a href="#演示案例：自定义网络" class="headerlink" title="演示案例：自定义网络"></a>演示案例：自定义网络</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先通过命令创建一个网络</span></span><br><span class="line">docker<span class="built_in"> network </span>create hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看网络</span></span><br><span class="line">docker<span class="built_in"> network </span>ls</span><br><span class="line"><span class="comment"># 结果：</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">NETWORK </span>ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87  <span class="built_in"> bridge </span>  <span class="built_in"> bridge </span>   local</span><br><span class="line">403f16ec62a2   hmall    <span class="built_in"> bridge </span>   local</span><br><span class="line">0dc0f72a0fbb   host      host      local</span><br><span class="line">cd8d3e8df47b   none      <span class="literal">null</span>      local</span><br><span class="line"><span class="comment"># 其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker<span class="built_in"> network </span>connect hmall mysql --alias db</span><br><span class="line"><span class="comment"># 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker<span class="built_in"> network </span>connect hmall dd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment"># 4.1.进入容器</span></span><br><span class="line">docker exec -it dd bash</span><br><span class="line"><span class="comment"># 4.2.用db别名访问</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">ping </span>db</span><br><span class="line"><span class="comment"># 结果</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">PING </span>db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes <span class="keyword">from</span> mysql.hmall (172.18.0.2): <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.070 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> mysql.hmall (172.18.0.2): <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.056 ms</span><br><span class="line"><span class="comment"># 4.3.用容器名访问</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">ping </span>mysql</span><br><span class="line"><span class="comment"># 结果：</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">PING </span>mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes <span class="keyword">from</span> mysql.hmall (172.18.0.2): <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.044 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> mysql.hmall (172.18.0.2): <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.054 ms</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问 </li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  --name mysql <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -p <span class="number">3306</span>:<span class="number">3306</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -e TZ=Asia/shanghai <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -e MYSQL_ROOT_PASSWORD=<span class="number">123</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  mysql</span><br></pre></td></tr></table></figure><ul><li><p>docker run  ：创建并运行一个容器</p></li><li><p><strong>-d</strong> 是让容器在后台运行</p></li><li><p><strong>–name</strong> ：给容器起个名字，<strong>必须唯一</strong></p></li><li><p><strong>-p 3306:3306</strong>  ：设置端口映射</p><ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><p><strong>-e KEY=VALUE</strong> ：设置环境变量   （配置容器内进程运行时的一些参数）</p><ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ`</code>=Asia/Shanghai<code>是设置时区；</code>MYSQL_ROOT_PASSWORD=123`是设置MySQL默认密码</li></ul></li><li><p><strong>mysql</strong>  ：指定运行的镜像的名字</p><ul><li><p><strong>镜像命令规范</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像名称一般分为两部分组成：[repository]:[<span class="keyword">tag</span>]</span><br><span class="line">repository是镜像名称</span><br><span class="line"><span class="keyword">tag</span>是镜像的版本</span><br><span class="line">如：mysq<span class="variable">l:5</span>.<span class="number">7</span></span><br><span class="line">在没有指定<span class="keyword">tag</span>时，默认时Latest,代表最新版本的镜像</span><br></pre></td></tr></table></figure><p>镜像的名称不是随意的，而是要到DockerRegistry中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在DockerHub网站或者软件的官方网站中都能找到。</p></li></ul></li></ul><h2 id="部署Java应用"><a href="#部署Java应用" class="headerlink" title="部署Java应用"></a>部署Java应用</h2><p>部署的容器及端口说明：</p><table><thead><tr><th style="text-align:left"><strong>项目</strong></th><th style="text-align:left"><strong>容器名</strong></th><th style="text-align:left"><strong>端口</strong></th><th style="text-align:left"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:left">hmall</td><td style="text-align:left">hmall</td><td style="text-align:left">8080</td><td style="text-align:left">黑马商城后端API入口</td></tr><tr><td style="text-align:left">hmall-portal</td><td style="text-align:left">nginx</td><td style="text-align:left">18080</td><td style="text-align:left">黑马商城用户端入口</td></tr><tr><td style="text-align:left">hmall-admin</td><td style="text-align:left">18081</td><td style="text-align:left">黑马商城管理端入口</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">mysql</td><td style="text-align:left">mysql</td><td style="text-align:left">3306</td><td style="text-align:left">数据库</td></tr></tbody></table><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20250118224843305.png" alt="image-20250118224843305"></p><p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：<img src="D:\学习资料\实验室培训\运维\image\image-20250118224827073.png" alt="image-20250118224827073"></p><p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。</p><p>查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：<img src="D:\学习资料\实验室培训\运维\image\image-20250118224911797.png" alt="image-20250118224911797"></p><p>这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20250118224936404.png" alt="image-20250118224936404"></p><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>我们将项目打包：<img src="D:\学习资料\实验室培训\运维\image\image-20250118225005973.png" alt="image-20250118225005973"></p><p>结果：<img src="D:\学习资料\实验室培训\运维\image\image-20250118225023960.png" alt="image-20250118225023960"></p><p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：<img src="D:\学习资料\实验室培训\运维\image\image-20250118225045748.png" alt="image-20250118225045748"></p><p>部署项目：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line"><span class="attribute">docker</span> build -t hmall .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看镜像</span></span><br><span class="line"><span class="attribute">docker</span> images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="attribute">REPOSITORY</span>    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line"><span class="attribute">hmall</span>         latest    <span class="number">0</span>bb07b2c34b9   <span class="number">43</span> seconds ago   <span class="number">362</span>MB</span><br><span class="line"><span class="attribute">docker</span>-demo   <span class="number">1</span>.<span class="number">0</span>       <span class="number">49743484</span>da68   <span class="number">24</span> hours ago     <span class="number">327</span>MB</span><br><span class="line"><span class="attribute">nginx</span>         latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago    <span class="number">141</span>MB</span><br><span class="line"><span class="attribute">mysql</span>         latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago    <span class="number">516</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class="line"><span class="attribute">docker</span> run -d --name hmall --network hmall -p <span class="number">8080</span>:<span class="number">8080</span> hmall</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：http://虚拟机地址:8080/search/list</p><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在课前资料中已经给大家提供了nginx的部署目录：<img src="D:\学习资料\实验室培训\运维\image\image-20250118225200601.png" alt="image-20250118225200601"></p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li></ul><p>我们现在要做的就是把整个nginx目录上传到虚拟机的<code>/root</code>目录下：<img src="D:\学习资料\实验室培训\运维\image\image-20250118225217639.png" alt="image-20250118225217639"></p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/ng`</code>inx.conf`</li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><p>命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  --name nginx <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -p <span class="number">18080</span>:<span class="number">18080</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -p <span class="number">18081</span>:<span class="number">18081</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -v /root/nginx/html:/usr/share/nginx/html <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  --network hmall <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  nginx</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：http://虚拟机ip:18080</p><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>我们部署一个简单的java项目，其中包含3个容器：</p><ul><li>MySQL</li><li>Nginx</li><li>Java项目</li></ul><p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>docker-compose.yml文件的基本语法可以参考官方文档：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p><p>举例来说，用docker run部署MySQL的命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  --name mysql <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -p <span class="number">3306</span>:<span class="number">3306</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -e TZ=Asia/Shanghai <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -e MYSQL_ROOT_PASSWORD=<span class="number">123</span> <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -v ./mysql/data:/var/lib/mysql <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -v ./mysql/conf:/etc/mysql/conf.d <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  -v ./mysql/init:/docker-entrypoint-initdb.d <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>  --network hmall</span><br><span class="line">  <span class="attribute">mysql</span></span><br></pre></td></tr></table></figure><p>如果用<code>docker-compose.yml</code>文件来定义，就是这样</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="params">services:</span></span><br><span class="line">  <span class="params">mysql:</span></span><br><span class="line">    <span class="params">image:</span> mysql</span><br><span class="line">    <span class="params">container_name:</span> mysql</span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="params">TZ:</span> Asia<span class="symbol">/Shanghai</span></span><br><span class="line">      <span class="params">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="params">networks:</span></span><br><span class="line">      <span class="operator">-</span> new</span><br><span class="line"><span class="params">networks:</span></span><br><span class="line">  <span class="params">new:</span></span><br><span class="line">    <span class="params">name:</span> hmall</span><br></pre></td></tr></table></figure><p>对比如下：</p><table><thead><tr><th style="text-align:left"><strong>docker run 参数</strong></th><th style="text-align:left"><strong>docker compose 指令</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">–name</td><td style="text-align:left">container_name</td><td style="text-align:left">容器名称</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">ports</td><td style="text-align:left">端口映射</td></tr><tr><td style="text-align:left">-e</td><td style="text-align:left">environment</td><td style="text-align:left">环境变量</td></tr><tr><td style="text-align:left">-v</td><td style="text-align:left">volumes</td><td style="text-align:left">数据卷配置</td></tr><tr><td style="text-align:left">–network</td><td style="text-align:left">networks</td><td style="text-align:left">网络</td></tr></tbody></table><p>黑马商城部署文件：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">mysql</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attribute">container_name</span><span class="punctuation">:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">TZ</span><span class="punctuation">:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attribute">MYSQL_ROOT_PASSWORD</span><span class="punctuation">:</span> <span class="string">123</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attribute">hmall</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">build</span><span class="punctuation">: </span></span><br><span class="line">      <span class="attribute">context</span><span class="punctuation">:</span> <span class="string">.</span></span><br><span class="line">      <span class="attribute">dockerfile</span><span class="punctuation">:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attribute">container_name</span><span class="punctuation">:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attribute">depends_on</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attribute">nginx</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attribute">container_name</span><span class="punctuation">:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attribute">depends_on</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">hm-net</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：</p><p><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td>Options</td><td>-p</td><td>指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有service容器</td></tr><tr><td>Commands</td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td>Commands</td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td>Commands</td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td>Commands</td><td>stop</td><td>停止容器</td></tr><tr><td>Commands</td><td>start</td><td>启动容器</td></tr><tr><td>Commands</td><td>restart</td><td>重启容器</td></tr><tr><td>Commands</td><td>top</td><td>查看运行的进程</td></tr><tr><td>Commands</td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><p>演示：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.进入root目录</span></span><br><span class="line">cd /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.删除旧容器</span></span><br><span class="line">docker rm -f <span class="variable">$(</span>docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除hmall镜像</span></span><br><span class="line">docker rmi hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.清空MySQL数据</span></span><br><span class="line">rm -rf mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.启动所有, -d 参数是后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[+] <span class="title class_">Building</span> <span class="number">15</span>.5s (<span class="number">8</span>/<span class="number">8</span>) <span class="variable constant_">FINISHED</span></span><br><span class="line"> =&gt; [internal] load build definition from <span class="title class_">Dockerfile</span>                                    <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; transferring <span class="symbol">dockerfile:</span> 358B                                                    <span class="number">0</span>.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                       <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; transferring <span class="symbol">context:</span> 2B                                                         <span class="number">0</span>.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/<span class="symbol">openjdk:</span><span class="number">11.0</span>-jre-buster             <span class="number">15</span>.4s</span><br><span class="line"> =&gt; [<span class="number">1</span>/<span class="number">3</span>] <span class="variable constant_">FROM</span> docker.io/library/<span class="symbol">openjdk:</span><span class="number">11.0</span>-jre-buster<span class="variable">@sha256</span><span class="symbol">:</span>3546a17e6fb4ff4fa681c3  <span class="number">0</span>.0s</span><br><span class="line"> =&gt; [internal] load build context                                                       <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; transferring <span class="symbol">context:</span> 98B                                                        <span class="number">0</span>.0s</span><br><span class="line"> =&gt; <span class="variable constant_">CACHED</span> [<span class="number">2</span>/<span class="number">3</span>] <span class="variable constant_">RUN</span> ln -snf /usr/share/zoneinfo/<span class="title class_">Asia</span>/<span class="title class_">Shanghai</span> /etc/localtime &amp;&amp; echo   <span class="number">0</span>.0s</span><br><span class="line"> =&gt; <span class="variable constant_">CACHED</span> [<span class="number">3</span>/<span class="number">3</span>] <span class="variable constant_">COPY</span> hm-service.jar /app.jar                                           <span class="number">0</span>.0s</span><br><span class="line"> =&gt; exporting to image                                                                  <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                 <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; writing image <span class="symbol">sha256:</span>32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  <span class="number">0</span>.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           <span class="number">0</span>.0s</span><br><span class="line">[+] <span class="title class_">Running</span> <span class="number">4</span>/<span class="number">4</span></span><br><span class="line"> ✔ <span class="title class_">Network</span> hmall    <span class="title class_">Created</span>                                                             <span class="number">0</span>.2s</span><br><span class="line"> ✔ <span class="title class_">Container</span> mysql  <span class="title class_">Started</span>                                                             <span class="number">0</span>.5s</span><br><span class="line"> ✔ <span class="title class_">Container</span> hmall  <span class="title class_">Started</span>                                                             <span class="number">0</span>.9s</span><br><span class="line"> ✔ <span class="title class_">Container</span> nginx  <span class="title class_">Started</span>                                                             <span class="number">1</span>.5s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="variable constant_">CONTAINER</span>           <span class="variable constant_">REPOSITORY</span>          <span class="variable constant_">TAG</span>                 <span class="variable constant_">IMAGE</span> <span class="variable constant_">ID</span>            <span class="variable constant_">SIZE</span></span><br><span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class="line">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class="line">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查看容器</span></span><br><span class="line">docker compose ps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="variable constant_">NAME</span>                <span class="variable constant_">IMAGE</span>               <span class="variable constant_">COMMAND</span>                  <span class="variable constant_">SERVICE</span>             <span class="variable constant_">CREATED</span>             <span class="variable constant_">STATUS</span>              <span class="variable constant_">PORTS</span></span><br><span class="line">hmall               root-hmall          <span class="string">&quot;java -jar /app.jar&quot;</span>     hmall               <span class="number">54</span> seconds ago      <span class="title class_">Up</span> <span class="number">52</span> seconds       <span class="number">0.0</span>.<span class="number">0.0</span><span class="symbol">:</span><span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp, <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">mysql               mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               <span class="number">54</span> seconds ago      <span class="title class_">Up</span> <span class="number">53</span> seconds       <span class="number">0.0</span>.<span class="number">0.0</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">33060</span>/tcp</span><br><span class="line">nginx               nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               <span class="number">54</span> seconds ago      <span class="title class_">Up</span> <span class="number">52</span> seconds       <span class="number">80</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span><span class="symbol">:</span><span class="number">18080</span>-<span class="number">18081</span>-&gt;<span class="number">18080</span>-<span class="number">18081</span>/tcp, <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">18080</span>-<span class="number">18081</span>-&gt;<span class="number">18080</span>-<span class="number">18081</span>/tcp</span><br></pre></td></tr></table></figure><p>打开浏览器，访问：<a href="http://yourIp:8080">http://yourIp:8080</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;镜像与容器&lt;/p&gt;
&lt;p&gt;当我们利用Docker安装应用时，Docker会自动搜索并下载应用&lt;strong&gt;镜像(image)&lt;/stron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git和docker常用命令</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/git%E5%92%8Cdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/git%E5%92%8Cdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2025-01-16T02:50:28.000Z</published>
    <updated>2025-01-16T02:51:17.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">初始化和配置</span><br><span class="line"></span><br><span class="line">git init: 初始化一个新的Git仓库。</span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;xxx&quot;</span>: 配置全局用户名。</span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;xxx@xxx.com&quot;</span>: 配置全局用户邮箱。</span><br><span class="line"></span><br><span class="line">基本操作</span><br><span class="line"></span><br><span class="line">git <span class="built_in">add</span> <span class="symbol">&lt;file&gt;</span>: 将文件添加到暂存区。</span><br><span class="line"></span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">&#x27;message&#x27;</span>: 提交暂存区的内容到仓库。</span><br><span class="line"></span><br><span class="line">git status: 查看仓g库当前状态，显示有变更的文件。</span><br><span class="line"></span><br><span class="line">git rm <span class="symbol">&lt;file&gt;</span>: 从仓库中删除文件。</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>: 查看提交历史。</span><br><span class="line"></span><br><span class="line">git reset --<span class="symbol">&lt;soft&gt;</span><span class="symbol">&lt;hard&gt;</span>[mixed]: 回退</span><br><span class="line"></span><br><span class="line">git <span class="keyword">ls</span>-<span class="keyword">files</span>  : 查看暂存区内容</span><br><span class="line"></span><br><span class="line">rm <span class="symbol">&lt;file&gt;</span>   ： 删除工作区文件</span><br><span class="line"></span><br><span class="line">git rm <span class="symbol">&lt;file&gt;</span> 删除暂存区和工作区 文件</span><br><span class="line"></span><br><span class="line">git rm -- cache <span class="symbol">&lt;file&gt;</span> :删除暂存区</span><br><span class="line"></span><br><span class="line">分支管理</span><br><span class="line"></span><br><span class="line">git branch: 列出所有本地分支。</span><br><span class="line"></span><br><span class="line">git checkout <span class="symbol">&lt;branch&gt;</span>: 切换到指定分支。</span><br><span class="line"></span><br><span class="line">git merge <span class="symbol">&lt;branch&gt;</span>: 合并指定分支到当前分支。</span><br><span class="line"></span><br><span class="line">git branch -d <span class="symbol">&lt;branch&gt;</span>: 删除本地分支。</span><br><span class="line"></span><br><span class="line">远程仓库</span><br><span class="line"></span><br><span class="line">git clone <span class="symbol">&lt;url&gt;</span>: 克隆远程仓库。</span><br><span class="line"></span><br><span class="line">git push <span class="symbol">&lt;remote&gt;</span> <span class="symbol">&lt;branch&gt;</span>: 将本地分支推送到远程仓库。</span><br><span class="line"></span><br><span class="line">git pull <span class="symbol">&lt;remote&gt;</span> <span class="symbol">&lt;branch&gt;</span>: 从远程仓库拉取最新内容并合并到本地分支。</span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">add</span> <span class="symbol">&lt;name&gt;</span> <span class="symbol">&lt;url&gt;</span>: 添加新的远程仓库。</span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">命令            说明             文档地址</span><br><span class="line">docker pull    拉取镜像   docker pull</span><br><span class="line">docker <span class="keyword">push</span>    推送镜像到      DockerRegistrydocker <span class="keyword">push</span></span><br><span class="line">docker images查看本地镜像 docker images</span><br><span class="line">docker rmi    删除本地镜像docker rmi</span><br><span class="line">docker <span class="keyword">run</span>    创建并运行容器（不能重复创建）docker <span class="keyword">run</span></span><br><span class="line">docker <span class="keyword">stop</span>    停止指定容器docker <span class="keyword">stop</span></span><br><span class="line">docker start启动指定容器docker start</span><br><span class="line">docker restart重新启动容器docker restart</span><br><span class="line">docker rm    删除指定容器docs.docker.com</span><br><span class="line">docker ps    查看容器  docker ps</span><br><span class="line">docker logs    查看容器运行日志   docker logs</span><br><span class="line">docker <span class="built_in">exec</span>    进入容器  docker <span class="built_in">exec</span></span><br><span class="line">docker <span class="keyword">save</span>    保存镜像到本地压缩文件docker <span class="keyword">save</span></span><br><span class="line">docker <span class="keyword">load</span>    加载本地压缩文件到镜像docker <span class="keyword">load</span></span><br><span class="line">docker inspect查看容器详细信息docker inspect</span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令                     说明        文档地址</span><br><span class="line">docker<span class="built_in"> network </span>create创建一个网络docker<span class="built_in"> network </span>create</span><br><span class="line">docker<span class="built_in"> network </span>ls    查看所有网络docs.docker.com</span><br><span class="line">docker<span class="built_in"> network </span>rm    删除指定网络docs.docker.com</span><br><span class="line">docker<span class="built_in"> network </span>prune清除未使用的网络docs.docker.com</span><br><span class="line">docker<span class="built_in"> network </span>connect使指定容器连接加入某网络docs.docker.com</span><br><span class="line">docker<span class="built_in"> network </span>disconnect使指定容器连接离开某网络docker<span class="built_in"> network </span>disconnect</span><br><span class="line">docker<span class="built_in"> network </span>inspect查看网络详细信息docker<span class="built_in"> network </span>inspect</span><br></pre></td></tr></table></figure><h2 id="DockerCompose是什么，如何编写一个Dockerfile"><a href="#DockerCompose是什么，如何编写一个Dockerfile" class="headerlink" title="DockerCompose是什么，如何编写一个Dockerfile"></a>DockerCompose是什么，如何编写一个Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">指令    说明     示例</span><br><span class="line"><span class="keyword">FROM</span>指定基础镜像<span class="keyword">FROM</span> centos:<span class="number">6</span></span><br><span class="line"><span class="keyword">ENV</span>设置环境变量，可在后面指令使用<span class="keyword">ENV</span> key value</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash">拷贝本地文件到镜像的指定目录COPY ./xx.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">执行Linux的shell命令，一般是安装过程的命令RUN yum install gcc</span></span><br><span class="line"><span class="keyword">EXPOSE</span>指定容器运行时监听的端口，是给镜像使用者看的<span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash">镜像中应用的启动命令，容器运行时调用ENTRYPOINT java -jar xx.jar</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git常用指令&quot;&gt;&lt;a href=&quot;#git常用指令&quot; class=&quot;headerlink&quot; title=&quot;git常用指令&quot;&gt;&lt;/a&gt;git常用指令&lt;/h1&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VI编辑器</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/VI%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/VI%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2025-01-16T02:49:34.000Z</published>
    <updated>2025-01-16T02:49:43.909Z</updated>
    
    <content type="html"><![CDATA[<p>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</p><p>同图形化界面中的 文本编辑器 一样，vi是命令行下对文本文件进行编辑的绝佳选择</p><p>vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且具有shell程序编辑的功能，可以通过不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p><h1 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h1><p><strong>命令模式(Command mode)</strong></p><ul><li><p>命令模式下，所敲的按键，编辑器都理解为命令，以命令驱动执行不同的功能。</p></li><li><p>此模式下，不能自由进行文本编辑。</p></li></ul><p><strong>输入模式(Insert mode)</strong></p><ul><li><p>也就是编辑模式、插入模式。</p></li><li><p>此模式下，可以对文件内容进行自由编辑。</p></li></ul><p><strong>底线命令模式(Last line mode)</strong></p><ul><li>整体文件的控制，通常用于文件的保存、退出。</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209105244902.png" alt="image-20241209105244902"></p><h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><p>如果需要通过vi\vim编辑器编辑文件，需要以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> 文件路径</span><br><span class="line"><span class="keyword">vim</span> 文件路径</span><br></pre></td></tr></table></figure><p>vim兼容全部的vi功能</p><ul><li><p>如果文件路径表示的文件<strong>不存在</strong>，那么此命令会用于<strong>编辑新文件</strong></p></li><li><p>如果文件路径表示的文件<strong>存在</strong>，那么此命令用于<strong>编辑已有文件</strong></p></li></ul><p>通过vi/vim命令编辑文件,会打开一个新的窗口,此时这个窗口就是:命令模式窗口</p><p>命令模式是vi编辑器的入口和出口</p><ul><li><p>进入vi编辑器会进入命令模式</p></li><li><p>通过命令模式输入键盘指令,可以进入输入模式</p></li><li><p>输入模式需要退同到命令模式,然后通过命令可以进入底线命令模式</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209110542169.png" alt="image-20241209110542169"></p><ul><li>在命令模式内，按键盘 i ，进入输入模式</li><li>在输入模式内按 esc 回退到命令模式</li><li>在命令模式内按键盘 ： 进入底线命令模式</li><li>在底线命令模式内输入  :wq ，保存文件并退出vi编辑器</li></ul><p>w是保存，q是退出</p><h1 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h1><h2 id="命令模式进入输入模式"><a href="#命令模式进入输入模式" class="headerlink" title="命令模式进入输入模式"></a>命令模式进入输入模式</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在当前光标位置进入输入模式</td></tr><tr><td>a</td><td>在当前光标位置之后进入输入模式</td></tr><tr><td>I</td><td>在当前行的开头，进入输入模式</td></tr><tr><td>A</td><td>在当前行的结尾，进入输入模式</td></tr><tr><td>o（字母）</td><td>在当前光标插入下一行进入输入模式</td></tr><tr><td>O（字母）</td><td>在当前光标插入上一行进入输入模式</td></tr><tr><td>r</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；</td></tr><tr><td>R</td><td>进入取代模式(Replace mode)：R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>esc</td><td>任何情况下输入<strong>esc</strong>都能回到命令模式</td></tr></tbody></table><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>键盘上、键盘k</td><td>向上移动光标</td></tr><tr><td>键盘下、键盘j</td><td>向下移动光标</td></tr><tr><td>键盘左、键盘h</td><td>向左移动光标</td></tr><tr><td>键盘右、键盘l</td><td>向右移动光标</td></tr><tr><td>pageup(pgUp)</td><td>向上翻页</td></tr><tr><td>pagedown(PgDn)</td><td>向下翻页</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td>0（数字）或[Home]键</td><td>移动光标到当前行的开头</td></tr><tr><td>$或[End]键</td><td>移动光标到当前行的结尾</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>跳到最后一行的第一个字符</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>跳到首行</td></tr><tr><td>n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><h2 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>x，X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除光标所在行的内容（常用）</td></tr><tr><td>ndd</td><td>n是数字，表示删除当前光标向下n行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制当前行（常用）</td></tr><tr><td>nyy</td><td>n是数字，复制当前行和下面的n行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>撤销修改，复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>反向撤销修改，重做上一个动作。(常用)</td></tr></tbody></table><h1 id="底线命令模式的命令"><a href="#底线命令模式的命令" class="headerlink" title="底线命令模式的命令"></a>底线命令模式的命令</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>:q</td><td>仅退出</td></tr><tr><td>:q!</td><td>强制退出</td></tr><tr><td>:w</td><td>仅保存，将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr><tr><td>:set paste</td><td>设置粘贴模式（适用于从外部复制内容，粘贴到内部）</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vi&#92;vim是visual interface的简称，是Linux中最经典的文本编辑器&lt;/p&gt;
&lt;p&gt;同图形化界面中的 文本编辑器 一样，vi是命令行下对文本文件进行编辑的绝佳选择&lt;/p&gt;
&lt;p&gt;vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且具有shell</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux用户和权限</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</id>
    <published>2025-01-16T02:48:27.000Z</published>
    <updated>2025-01-16T02:48:47.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h1><p>root（超级管理员）</p><p>拥有最大的系统权限</p><ul><li>普通用户的权限，一般在其HOME目录内是不受限的</li><li>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</li></ul><h2 id="su和exit命令"><a href="#su和exit命令" class="headerlink" title="su和exit命令"></a>su和exit命令</h2><p>su命令就是用于账户切换的系统命令，其来源英文单词：Switch User</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su <span class="selector-attr">[-]</span><span class="selector-attr">[用户名]</span></span><br></pre></td></tr></table></figure><ul><li>选项，-，符号是可选的，表示是否在切换用户后加载环境变量，<strong>建议带上</strong></li><li>参数：用户名。表示要切换的用户，用户名也可以省略，省略表示切换到root</li><li><strong>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl + d</strong></li><li>使用普通用户，切换到其他用户<strong>需要i输入密码</strong>，如切换到root用户</li><li>使用root用户切换到其他用户，<strong>无需密码</strong>，可以直接切换</li></ul><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p>为了避免长期使用root用户带来系统损坏，我们可以使用sudo命令，为普通的命令授权，临时以root身份执行</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> 其他命令</span><br></pre></td></tr></table></figure><ul><li>在其他命令之前，带上sudo，即可为这一条命令临时赋予root权限</li><li>但是并不是所有的用户都有权力使用sudo，我们<strong>需要为普通用户配置sudo认证</strong></li></ul><h2 id="为普通用户配置sudo认证"><a href="#为普通用户配置sudo认证" class="headerlink" title="为普通用户配置sudo认证"></a>为普通用户配置sudo认证</h2><ul><li><p>切换到root用户，执行 <strong>visudo</strong> 命令，会自动通过vi编辑器打开:/etc/sudoers 也可以输入 <strong>vi   /etc/sudoers</strong></p></li><li><p>在文件的最后添加：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名 <span class="keyword">ALL</span> =(<span class="keyword">ALL</span>)   NOPASSWD: <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><ul><li>其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</li></ul></li><li><p>最后通过wq保存</p></li><li><p>切回到普通用户<img src="D:\学习资料\实验室培训\运维\image\image-20241209200205123.png" alt="image-20241209200205123"></p></li></ul><p>执行的命令均以root运行</p><h1 id="用户、用户组管理"><a href="#用户、用户组管理" class="headerlink" title="用户、用户组管理"></a>用户、用户组管理</h1><p>Linux系统中可以</p><ul><li>配置多个用户</li><li>配置多个用户组</li><li>用户可以加入多个用户组中</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209200659571.png" alt="image-20241209200659571"></p><p>Linux中关于<strong>权限的管控级别有2个级别</strong>，分别是：</p><ul><li>针对用户的权限控制（用户级别）</li><li>针对用户组的权限控制（用户组级别）</li></ul><p>比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。所以，我们需要学习在Linux中进行用户、用户组管理的基础命令。</p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><strong>以下命令需要root用户执行</strong></p><ul><li><p>创建用户组</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupadd</span> 用户组名</span><br></pre></td></tr></table></figure></li><li><p>删除用户组</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupdel</span> 用户组名</span><br></pre></td></tr></table></figure></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><strong>以下命令需要root用户执行</strong></p><ul><li><p>创建用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd<span class="selector-attr">[-g -d]</span> 用户名</span><br></pre></td></tr></table></figure><ul><li>选项：-g，指定用户的组，不指定 -g，会创建同名组并自动加入，指定 -g 需要组已经存在，如已经存在同名组，必须使用-g</li><li>选项：-d，指定用户HOME路径，不指定，HOME目录默认在：/home/用户名</li></ul></li><li><p>删除用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel<span class="selector-attr">[-r]</span> 用户名</span><br></pre></td></tr></table></figure><ul><li>选项，-r，删除用户的HOME目录，不使用-r，删除用户时，HOME目录保留</li></ul></li><li><p>查看用户所属组</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>[用户名]</span><br></pre></td></tr></table></figure><ul><li>参数：用户名，被查看的用户，如果不提供则查看自身</li></ul></li><li><p>修改用户所属组</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">usermod</span> -aG 用户组  用户名</span><br></pre></td></tr></table></figure><ul><li>将指定的用户加入指定的用户组</li></ul></li><li><p>查看当前系统中有哪里用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">getent passwd</span></span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209204002664.png" alt="image-20241209204002664"></p></li></ul><p>共有7份信息，分别是：</p><p>用户名：密码(x)：用户ID：组ID：描述信息(无用)：HOME目录：执行终端(默认bash)</p><ul><li><p>查看当前系统中有哪些用户组</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent <span class="keyword">group</span></span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209204329211.png" alt="image-20241209204329211"></p></li></ul><p>包含3份信息</p><p>组名称：组认证（显示为x）：组ID</p><h1 id="查看权限管控"><a href="#查看权限管控" class="headerlink" title="查看权限管控"></a>查看权限管控</h1><h2 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h2><p>通过ls -l 可以以列表形式查看内容，并显示权限细节</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209205026322.png" alt="image-20241209205026322"></p><ul><li>序号1，表示文件、文件夹的权限控制信息</li><li>序号2，表示文件、文件夹所属用户</li><li>序号3，表示文件、文件夹所属用户组</li></ul><p>对序号1进行细节刨析</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209205228742.png" alt="image-20241209205228742"></p><p>举例：drwxr-xr-x，表示</p><ul><li>这是一个文件夹，首字母d表示</li><li>所属用户的权限是：有r有w有x，rwx</li><li>所属用户组的权限是：有r无w有x，r-x（- 表示无此权限）</li><li>其他用户的权限是：有r无w有x，r-x</li></ul><h3 id="rwx的意义"><a href="#rwx的意义" class="headerlink" title="rwx的意义"></a>rwx的意义</h3><ul><li>r 表示读权限</li><li>w 表示写权限</li><li>x 表示执行权限</li></ul><p>针对文件、文件夹的不同，rwx的含义有细微差别</p><ul><li>r，针对文件可以查看文件内容<ul><li>针对文件夹，可以查看文件夹内，如 ls 命令</li></ul></li><li>w，针对文件表示可以修改此文件<ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li>x，针对文件表示可以将文件作为程序执行<ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即 cd 进入</li></ul></li></ul><h2 id="修改权限控制-—chmod"><a href="#修改权限控制-—chmod" class="headerlink" title="修改权限控制 —chmod"></a>修改权限控制 —chmod</h2><p>我们可以通过chmod命令，修改文件、文件夹的权限信息。</p><p><strong>注意：只有文件、文件夹的所属用户或root用户可以修改</strong></p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] 权限 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项：-R，对文件夹内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li>chmod u=rwx,g=rx,o=x hello.txt    将文件权限修改为：rwxr-x–x<ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其他用户权限</li></ul></li><li>chmod -R u=rwx,g=rw,o=x  test     将文件夹test以及文件夹内全部内容权限设置为：rwxr-x–x</li></ul><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><p>权限可以用3为数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其他用户权限</p><p>数字的细节如下：r记为4，w记为2，x记为1.可以有：</p><p>0:无任何权限，即 —<br>1:仅有x权限即 –X<br>2:仅有w权限即 -W-<br>3:有w和x权限即-WX<br>4:仅有r权限即r–<br>5:有r和x权限lr-X<br>6:有r和w权限即 rw-<br>7:有全部权限即 rwX</p><h2 id="修改权限控制-—chown"><a href="#修改权限控制-—chown" class="headerlink" title="修改权限控制 —chown"></a>修改权限控制 —chown</h2><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p><strong>普通用户无法修改所属为其他用户或组，所以此命令之适用于root用户执行</strong></p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown <span class="selector-attr">[-R]</span><span class="selector-attr">[用户]</span><span class="selector-attr">[:]</span><span class="selector-attr">[用户组]</span> 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项，-R，同chmod，对文件夹内全部内容应用相同规则</li><li>选项，用户，修改所属用户</li><li>选项，用户组，修改所属用户组</li><li>:   用于分隔用户和用户组</li></ul><p>示例：</p><ul><li>chown root hello.txt   将hello.txt所属用户修改为root</li><li>chown :root hello.txt   将hello.txt所属用户组修改为root</li><li>chown root :itheima hello.txt   将hello.txt所属用户修改为root，用户组修改为itheima</li><li>chown -R root test    将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;root用户&quot;&gt;&lt;a href=&quot;#root用户&quot; class=&quot;headerlink&quot; title=&quot;root用户&quot;&gt;&lt;/a&gt;root用户&lt;/h1&gt;&lt;p&gt;root（超级管理员）&lt;/p&gt;
&lt;p&gt;拥有最大的系统权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通用户的权限，一般在其</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux实用技巧</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2025-01-16T02:47:30.000Z</published>
    <updated>2025-01-16T02:47:49.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各类小技巧快捷键"><a href="#各类小技巧快捷键" class="headerlink" title="各类小技巧快捷键"></a>各类小技巧快捷键</h1><h2 id="ctrl-c-强制停止"><a href="#ctrl-c-强制停止" class="headerlink" title="ctrl + c 强制停止"></a>ctrl + c 强制停止</h2><ul><li><p>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键ctrl + c</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211163716231.png" alt="image-20241211163716231"></p></li><li><p>命令输入错误，也可以通过快捷键ctrl + c，退出当前输入，重新输入</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211163753714.png" alt="image-20241211163753714"></p><h2 id="ctrl-d-退出或登出"><a href="#ctrl-d-退出或登出" class="headerlink" title="ctrl + d 退出或登出"></a>ctrl + d 退出或登出</h2><ul><li><p>可以通过快捷键：ctrl  + d，退出账户的登录<img src="D:\学习资料\实验室培训\运维\image\image-20241211163913343.png" alt="image-20241211163913343"></p></li><li><p>或者退出某些特定程序的专属界面</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164020447.png" alt="image-20241211164020447"></p></li><li><p>注意：不能用于退出vi/vim</p></li></ul><h2 id="历史命令搜索"><a href="#历史命令搜索" class="headerlink" title="历史命令搜索"></a>历史命令搜索</h2><ul><li>可以通过<strong>history</strong>命令，查看历史输入过的命令</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164242301.png" alt="image-20241211164242301"></p><ul><li>可以通过<strong>：！命令前缀</strong>，自动执行上一次匹配前缀的命令</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164530545.png" alt="image-20241211164530545"></p><ul><li><p>可以通过快捷键<strong>：ctrl + r，输入内容去</strong>匹配历史命令</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164816228.png" alt="image-20241211164816228"></p><ul><li>如果搜索到的内容是你需要的，那么<ul><li>回车键可以直接执行</li><li>键盘左右键，可以得到此命令（不执行）</li></ul></li></ul></li></ul><h2 id="光标移动快捷键"><a href="#光标移动快捷键" class="headerlink" title="光标移动快捷键"></a>光标移动快捷键</h2><ul><li>ctrl + a，跳到命令开头</li><li>ctrl + e，跳到命令结尾</li><li>ctrl + 键盘左键，向左跳一个单词</li><li>ctrl+ 键盘右键，向右跳一个单词</li></ul><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul><li>通过快捷键ctrl+l，可以清空终端内容</li><li>或通过命令clear得到同样效果</li></ul><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h2><p>yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><p>语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum[-y][<span class="keyword">install</span> | <span class="keyword">remove</span> | search] 软件名称</span><br></pre></td></tr></table></figure><ul><li><p>选项：-y，自动确认，无需手动安装或卸载过程</p></li><li><p>install：安装</p></li><li><p>remove：卸载</p></li><li><p>search：搜索</p><p>yum命令需要root权限，可以su切换到root，或使用sudo提权。</p><p>yum命令需要联网</p></li></ul><p><strong>Ubuntu</strong>中的安装软件</p><p>apt</p><p>语法：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt [-y][jinstall | <span class="type">remove</span> | <span class="type">search</span>] 软件名称</span><br></pre></td></tr></table></figure><p>用法和yum一致，同样需要root权限</p><ul><li>install：安装</li><li>remove：卸载</li><li>search：搜索</li></ul><h1 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h1><p>Linux系统很多软件（内置或者第三方）均支持使用systemctl命令控制：启动、停止、开机自启动</p><p>能够被systemctl管理的软件，一般也称之为：服务</p><p><strong>语法：</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start | <span class="type">stop</span> | <span class="type">status</span> | <span class="type">enable</span> | <span class="type">disable</span> 服务名</span><br></pre></td></tr></table></figure><ul><li>start 启动</li><li>stop 停止</li><li>status 查看状态</li><li>enable 开启开机自启</li><li>disable 关闭开机自启</li></ul><p>系统内置的服务比较多，比如：</p><ul><li>NetworkManager，主网络服务</li><li>network，副网络服务</li><li>firewalld，防火墙服务</li><li>sshd,ssh服务（FinalShell远程登陆Linux使用这个服务）</li></ul><p>除了内置的服务以外，部分第三方软件安装后也可以用systemctl进行控制</p><ul><li><p>yum install -y ntp，安装ntp软件</p><p>可以通过ntpd服务名，配合systemctl进行控制</p></li><li><p>yum install -y httpd，安装apache服务器软件</p></li></ul><p>可以通过httod服务名，配合systemctl进行控制</p><p><strong>部分软件安装后没有自动集成systemctl中，我们可以手动添加。</strong></p><h1 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h1><p>在系统中创建软链接，可以将文件、文件夹链接到其他位置。</p><p>类似windos系统中的《快捷方式》</p><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ln</span> -s 参数<span class="number">1</span> 参数<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>-s选项，创建软连接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：要链接去的目的地</li></ul><p>例如：</p><ul><li>ln -s /etc/yum.conf~/yum.conf</li><li>ln -s /etc/yum~/yum</li></ul><h1 id="日期和时区"><a href="#日期和时区" class="headerlink" title="日期和时区"></a>日期和时区</h1><h2 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h2><p>通过date命令可以在命令行中查看系统的时间</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date<span class="selector-attr">[-d]</span> <span class="selector-attr">[+格式化字符串]</span></span><br></pre></td></tr></table></figure><ul><li>-d 按照给定的字符串显示日期，一般用于日期计算</li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年</li><li>%y   年份后两位数组（00..99）</li><li>%m  月份（01..12）</li><li>%d  日（1..31）</li><li>%H  小时（00..23）</li><li>%M  分钟（00..59）</li><li>%S  秒（0..60）</li><li>%s  自1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li><li><p>使用date命令本体，无选项，直接查看时间<img src="D:\学习资料\实验室培训\运维\image\image-20241212213242505.png" alt="image-20241212213242505"></p></li><li><p>按照2022-01-01的格式显示日期<img src="D:\学习资料\实验室培训\运维\image\image-20241212213336915.png" alt="image-20241212213336915"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期<img src="D:\学习资料\实验室培训\运维\image\image-20241212213512411.png" alt="image-20241212213512411"></p></li></ul><ul><li><p>-d选项，可以按照给定的字符串显示日期，一般用于日期计算</p><p>| 命令                       | 描述             |<br>| ————————– | —————- |<br>| date -d “+1 day” +%Y%m%d   | 显示后一天的日期 |<br>| date -d “-1 day” +%Y%m%d   | 显示前一天的日期 |<br>| date -d “-1 month” +%Y%m%d | 显示上一月的日期 |<br>| date -d “+1 month” +%Y%m%d | 显示下一月的日期 |<br>| date -d “-1 year” +%Y%m%d  | 显示前一年的日期 |<br>| date -d “+1 year” +%Y%m%d  | 显示下一年的日期 |</p></li><li><p>其中支持的时间标记为</p><ul><li>year年</li><li>month月</li><li>day天</li><li>hour小时</li><li>minute分钟</li><li>second秒</li></ul></li><li><p>-d选项可以和格式化字符串配合一起使用</p></li></ul><h2 id="修改Linux时区"><a href="#修改Linux时区" class="headerlink" title="修改Linux时区"></a>修改Linux时区</h2><p>使用root权限，执行如下命令，修改时区为东八区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/localtime</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>将系统自带的localtime文件删除，        </p><p>并将/usr/share/zoneinfo/Asia/Shanghai文件链接为localtime文件即可</p><h2 id="ntp程序"><a href="#ntp程序" class="headerlink" title="ntp程序"></a>ntp程序</h2><p>我们可以通过ntp程序自动校准系统时间</p><p>安装ntp：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> ntp</span><br></pre></td></tr></table></figure><p>启动并设置开机自启</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">system</span>ctl start ntpd</span><br><span class="line"><span class="params">system</span>ctl enable ntpd</span><br></pre></td></tr></table></figure><p>当ntpd启动后，会定期的帮助我们联网校准系统的时间</p><ul><li><p>也可以手动校准（需要root权限）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ntpdate</span> -u ntp.aliyun.com</span><br></pre></td></tr></table></figure><p>通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令自动校准</p></li></ul><h1 id="IP地址、主机名"><a href="#IP地址、主机名" class="headerlink" title="IP地址、主机名"></a>IP地址、主机名</h1><p>可以通过命令：ifconfig，查看本机的IP地址，如无法使用ifconfig命令，可以安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -<span class="attribute">y</span> stall net-tools</span><br></pre></td></tr></table></figure><h2 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h2><ul><li><p>127.0.0.1  这个IP地址用于指代<strong>本机</strong></p></li><li><p>0.0.0.0  ，特殊IP地址</p><ul><li>可以用于指代本机</li><li>可以在端口绑定中用来确定绑定关系</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示运行任意IP访问</li></ul></li></ul><h2 id="在Linux中修改主机名"><a href="#在Linux中修改主机名" class="headerlink" title="在Linux中修改主机名"></a>在Linux中修改主机名</h2><ul><li><p>可以使用命令：<strong>hostname</strong>查看主机名<img src="D:\学习资料\实验室培训\运维\image\image-20241215141050054.png" alt="image-20241215141050054"></p></li><li><p>可以使用命令：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> 主机名  </span><br></pre></td></tr></table></figure><p>修改主机名，需要root权限<img src="D:\学习资料\实验室培训\运维\image\image-20241215141301227.png" alt="image-20241215141301227"></p></li><li><p>重新登陆finalshell即可看到主机名已经正确显示<img src="D:\学习资料\实验室培训\运维\image\image-20241215141342728.png" alt="image-20241215141342728"></p></li></ul><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>用一个字符串来映射IP地址<img src="D:\学习资料\实验室培训\运维\image\image-20241215141739656.png" alt="image-20241215141739656"></p><p>即</p><ul><li>先查看本机的记录（私人地址本）<ul><li>windos看：C:\Windons\System32\drivers\rtc\hosts</li><li>Linux看：/etc/hosts</li></ul></li><li>再联网去DNS服务器（如114.114.114.114 ，8.8.8.8等）询问</li></ul><h2 id="配置主机名映射"><a href="#配置主机名映射" class="headerlink" title="配置主机名映射"></a>配置主机名映射</h2><p>在finalshell中，通过域名来连接服务器</p><p>只需要在windows系统的C:\Windons\System32\drivers\rtc\hosts文件中配置记录即可</p><h2 id="配置固定IP"><a href="#配置固定IP" class="headerlink" title="配置固定IP"></a>配置固定IP</h2><p>在VMware Workstation中配置固定IP</p><p>分为两个大步骤</p><p>1.在VMware Workstation中配置IP地址网关和网段（IP地址的范围）</p><p>2.在Linux系统中手动修改配置文件，固定IP</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144229908.png" alt="image-20241215144229908"></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144322628.png" alt="image-20241215144322628"></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144403367.png" alt="image-20241215144403367"></p><p>网关中的最后一组，一定要设置成2</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144449500.png" alt="image-20241215144449500"></p><p>等号左右无空格</p><h1 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h1><h2 id="下载和网络请求"><a href="#下载和网络请求" class="headerlink" title="下载和网络请求"></a>下载和网络请求</h2><h3 id="ping命令检查服务器是否可联通"><a href="#ping命令检查服务器是否可联通" class="headerlink" title="ping命令检查服务器是否可联通"></a>ping命令检查服务器是否可联通</h3><p>语法：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Ping</span>[-c num] <span class="built_in">IP</span>或者主机名</span><br></pre></td></tr></table></figure><ul><li>选项，-c，检查的次数，不使用-c选项，将无限次数持续检查</li><li>参数：IP或主机名，被检查的服务器的IP地址或主机名地址</li></ul><p>示例：</p><ul><li>检查到baidu.com是否联通<img src="D:\学习资料\实验室培训\运维\image\image-20241215155603874.png" alt="image-20241215155603874"></li></ul><p>结果表示联通，延迟在25ms左右</p><ul><li><p>检查到39.156.66.10是否联通，并检查3次</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215155824680.png" alt="image-20241215155824680"></p></li></ul><h3 id="wget命令下载文件"><a href="#wget命令下载文件" class="headerlink" title="wget命令下载文件"></a>wget命令下载文件</h3><p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget<span class="selector-attr">[-b]</span> url</span><br></pre></td></tr></table></figure><ul><li>选项，-b，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li><li>参数，url，下载链接</li></ul><p>注意：无论下载是否完成，都会生成下载文件，如果下载未完成，及时删除下载文件</p><p>可以通过tail -f wget-log 命令持续跟踪监控后台下载</p><h3 id="curl命令发起网络请求"><a href="#curl命令发起网络请求" class="headerlink" title="curl命令发起网络请求"></a>curl命令发起网络请求</h3><p>curl命令口语发送http网络请求，可用于：下载文件、获取信息等</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="selector-attr">[-O]</span> url</span><br></pre></td></tr></table></figure><ul><li>选项，-O，<strong>用于下载文件</strong>，当url是下载链接是，可以使用此选项保存文件</li><li>参数，url，要发起请求的网络地址</li></ul><p>示例</p><ul><li>向cip.cc发起网络请求：curl cip.cc</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215160822627.png" alt="image-20241215160822627"></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>端口，是设备与外界通讯交流的出入口。端口可分为：物理端口和虚拟端口两类</p><ul><li><p>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等</p></li><li><p>虚拟端口：是指计算机内部的端口，是不可见的。用来操作系统和外部进行交互使用的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215161315020.png" alt="image-20241215161315020"></p></li></ul><p>计算机程序之间的通讯，通过IP只能锁定计算机，但是无法锁定具体的程序</p><p>通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通</p><p><strong>IP地址相当于小区地址，在小区内可以有许多住户（程序），而门牌号（端口）就是各个住户（程序）的联系地址</strong></p><p>Linux系统是一个超大号小区,可以支持65535个端口,这6万多个端口分为3类进行使用:</p><ul><li><strong>公认端口</strong>:1~1023,通常用于一些系统内置或知名程序的预留使用,如<strong>SSH服务的22端口</strong>,HTTPS服务的443端口非特殊需要，不要占用这个范围的端口</li><li><strong>注册端口</strong>:1024~49151,通常可以随意使用，用于松散的绑定一些程序\服务</li><li><strong>动态端口</strong>: 49152~65535,通常不会固定绑定程序,而是当程序对外进行网络链接时,用于临时使用。</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215162005041.png" alt="image-20241215162005041"></p><p>如图中，计算机A的微信连接计算机B的微信，A使用的50001即动态端口，临时找一个端口作为出口。计算机B的微信使用端口5678，即注册端口，长期绑定此端口等待别人连接</p><p>ps：上述微信的端口仅作演示，具体微信的端口使用非图中示意</p><h3 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h3><h4 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h4><p>使用nmap命令，查看指定IP地址对外暴露的端口</p><p>安装nmap：yum -y install nmap</p><p>语法：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">nmap</span> 被查看的<span class="built_in">IP</span>地址</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215162521729.png" alt="image-20241215162521729"></p><p>可以看到本机(127.0.0.1)上有4个端口下载被程序占用了</p><p>其中：</p><ul><li>22端口，一般是SSH服务使用，即FinalShell远程连接Linux所使用的端口</li></ul><h4 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h4><ul><li>可以通过netstat命令，查看本机指定端口号的占用情况</li></ul><p>语法：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="punctuation">-</span>anp <span class="string">| grep 端口号</span></span><br></pre></td></tr></table></figure><p>安装netstat：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> net-tools</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215163545371.png" alt="image-20241215163545371"></p><p>可以看到，当前系统6000端口，无人使用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215163737586.png" alt="image-20241215163737586"></p><p>如图，可以看到当前系统22端口被程序（进程号1006）占用了</p><p>其中，0.0.0.0.22，表示端口绑定在0.0.0.0这个IP地址上，表示运行外部访问</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>程序运行在操作系统中，是被操作系统所管理的</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p><p>并会为每一个进程分配一个独有的：进程ID（进程号）</p><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><p>可以通过ps命令查看Linux系统中的进程信息</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps<span class="selector-attr">[-e -f]</span></span><br></pre></td></tr></table></figure><p>选项，-e，显示出全部的进程</p><p>选项，-f，以完全格式化的形式列出全部进程的全部信息</p><p>一般来说，固定用法就是：ps -ef 列出全部进程的全部信息</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215164719231.png" alt="image-20241215164719231"></p><p>从左到右分别是：</p><ul><li>UID：进程所属的用户ID</li><li>PIN：进程的进程号ID</li><li>PPID：进程的父ID（启动此进程的其他进程）</li><li>C：此进程的CPU占用率（百分比）</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程的终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用CPU的时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ul><h2 id="查看指定进程"><a href="#查看指定进程" class="headerlink" title="查看指定进程"></a>查看指定进程</h2><p>可以使用管道符配合grep来进行过滤，如：</p><p>ps -ef | grep tail ，即可准确的找到tail命令的信息</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215170019923.png" alt="image-20241215170019923"></p><ul><li>过滤不仅仅过滤名称，进程号、用户ID等等，都可以被grep过滤</li><li>如ps -ef | grep 30001，过滤带有30001关键字的进程信息（一般指代过滤30001进程号）</li></ul><h2 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h2><p>在Linux系统中，可以通过<strong>kill</strong>命令关闭进程</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-9] 进程ID</span><br></pre></td></tr></table></figure><p>选项，-9，表示强制关闭进程。不使用此选项会向进程发送信号，要求其关闭，但是否关闭，需要看进程自身的处理机制</p><p>不加 -9，结束的时候，显示Terminated，自我结束</p><p>加-9，结束的时候，显示killed，表示强制结束</p><h1 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h1><h2 id="查看系统资源占用"><a href="#查看系统资源占用" class="headerlink" title="查看系统资源占用"></a>查看系统资源占用</h2><ul><li>可以通过top命令查看CPU、内存使用情况，类似Windows的任务管理器</li></ul><p>默认<strong>每5秒刷新</strong>一次，语法：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">top</span></span><br></pre></td></tr></table></figure><p>按q或者ctrl + c退出</p><p><strong>top命令内容详解</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215171151137.png" alt="image-20241215171151137"></p><ul><li>第一行<img src="D:\学习资料\实验室培训\运维\image\image-20241215171209693.png" alt="image-20241215171209693"></li></ul><p>top：命令名称，17:10:44 ：当前系统时间，up 1:31 ：启动了1:31， 6users：6个用户登陆，load：1、5、15分钟的平均负载</p><ul><li>第二行<img src="D:\学习资料\实验室培训\运维\image\image-20241215171448304.png" alt="image-20241215171448304"></li></ul><p>Tasks:220个进程， 3running：3个子进程在运行，216sleeping：216个进程睡眠，0stopped：0个停止进程，1 zombie ：1个僵尸进程</p><ul><li>第三行<img src="D:\学习资料\实验室培训\运维\image\image-20241215214235602.png" alt="image-20241215214235602"></li></ul><p>%Cpu(s): CPU使用率, us:用户CPU使用率, sy:系统CPU使用率, ni:高优先级进程占用CPU时间百分比, id:空闲CPU率, wa:10等待CPU占用率, hi: CPU硬件中断率，si:CPU软件中断率, st:强制等待占用CPU率</p><ul><li>第四、五行<img src="D:\学习资料\实验室培训\运维\image\image-20241215214405683.png" alt="image-20241215214405683"></li></ul><p>Kib Mem: 物理内存, total: 总量, free:空闲, used:使用, buff/cache: buff和cache占用</p><p>Kibswap: 虚拟内存(交换空间), total:总量, free:空闲, used:使用, buff/cache: buff和cache占用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215215316622.png" alt="image-20241215215316622"></p><ul><li>PID:进程id</li><li>USER:进程所属用户</li><li>PR:进程优先级，越小越高</li><li>NI:负值表示高优先级，正表示低优先级</li><li>VIRT:进程使用虚拟内存，单位KB</li><li>RES:进程使用物理内存，单位KB</li><li>SHR:进程使用共享内存，单位KB</li><li>S:进程状态(S休眠，R运行,Z僵死状态，N负数优先级，I空闲状态)</li><li>%CPU:进程占用CPU率</li><li>%MEM:进程占用内存率</li><li>TIME+: 进程使用CPU时间总计，单位10毫秒</li><li>COMMAND: 进程的命令或名称或程序文件路径</li></ul><h2 id="top命令选项"><a href="#top命令选项" class="headerlink" title="top命令选项"></a>top命令选项</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选项 功能</span><br><span class="line">-<span class="selector-tag">P</span> 只显示某个进程的信息</span><br><span class="line">-d 设置刷新时间，默认是<span class="number">5s</span></span><br><span class="line">-c 显示产生进程的完整命令，默认是进程名</span><br><span class="line">-n 指定刷新次数，比如<span class="attribute">top</span>-n <span class="number">3</span>，刷新输出<span class="number">3</span>次后退出</span><br><span class="line">-<span class="selector-tag">b</span> 以非交互非全屏模式运行，以批次的方式执行<span class="attribute">top</span>，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如 <span class="attribute">top</span> -<span class="selector-tag">b</span> -n <span class="number">3</span> &gt; /tmp/<span class="attribute">top</span><span class="selector-class">.tmp</span></span><br><span class="line">-<span class="selector-tag">i</span> 不显示任何闲置(idle)或无用(zombie)的进程</span><br><span class="line">-u 查找特定用户启动的进程</span><br></pre></td></tr></table></figure><h2 id="top交互式选项"><a href="#top交互式选项" class="headerlink" title="top交互式选项"></a>top交互式选项</h2><p>当top以交互式运行（非-b选项启动），可以用一下交互式命令进行控制</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">按键   功能</span><br><span class="line"></span><br><span class="line">h键   按下h键,会显示帮助画面</span><br><span class="line"></span><br><span class="line">c键   按下c键,会显示产生进程的完整命令,等同于-c参数,再次按下c键,变为默认显示</span><br><span class="line"></span><br><span class="line">f键   按下f键,可以选择需要展示的项目,按下空格前面带*后，表示显示。<span class="selector-tag">q</span>（或ESC）表示退出</span><br><span class="line"></span><br><span class="line">M键   按下M键,根据驻留内存大小(RES)排序</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">P</span>键   按下<span class="selector-tag">P</span>键,根据CPU使用百分比大小进行排序</span><br><span class="line"></span><br><span class="line">T键   按下T键,根据时间/累计时间进行排序</span><br><span class="line"></span><br><span class="line">E键   按下E键,切换顶部内存显示单位</span><br><span class="line"></span><br><span class="line">e键   按下e键,切换进程内存显示单位</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>键   按下<span class="number">1</span>键,切换显示平均负载和启动时间信息。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span>键   按下<span class="selector-tag">i</span>键,不显示闲置或无用的进程,等同于-<span class="selector-tag">i</span>参数,再次按下,变为默认显示</span><br><span class="line"></span><br><span class="line">t键   按下t键,切换显示CPU状态信息</span><br><span class="line"></span><br><span class="line">m键   按下m键,切换显示内存信息</span><br></pre></td></tr></table></figure><h2 id="磁盘信息监控"><a href="#磁盘信息监控" class="headerlink" title="磁盘信息监控"></a>磁盘信息监控</h2><ul><li>使用df命令，可以查看硬盘的使用情况</li></ul><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span>[-h]</span><br></pre></td></tr></table></figure><p>选项，-h，以更加人性化的单位显示<img src="D:\学习资料\实验室培训\运维\image\image-20241216130002574.png" alt="image-20241216130002574"></p><ul><li>可以使用iostat查看CPU、磁盘的相关信息</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat<span class="selector-attr">[-x]</span><span class="selector-attr">[num1]</span><span class="selector-attr">[num2]</span></span><br></pre></td></tr></table></figure><ul><li>选项：-x，显示更多信息</li><li>num1：数字，刷新间隔，num2：数字，刷新几次</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216130922091.png" alt="image-20241216130922091"></p><p>tps：该设备每秒的传输次数（Indicate the number of transfers per second thai were issued to the device.）一次传输的意思是“一次I/O请求”。多个逻辑情趣可能会被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。</p><ul><li>使用-x选项，显示更多信息</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216131649762.png" alt="image-20241216131649762"></p><p>从左到右：</p><p>rrqm/s:   </p><p>每秒这个设备相关的读取请求有多少被Merge了(当系统调用需要读取数据的时候,VFS将请求发到各个FS,如果FS发现不同的读取请求读取的是相同Block的数据,FS会将这个请求合并Merge,提高I0利用率,避免重复调用);</p><p>wrqm/s:<br>每秒这个设备相关的写入请求有多少被Merge了。</p><p>rsec/s:</p><p>每秒读取的扇区数;sectors</p><p>wsec/:</p><p>每秒写入的扇区数。</p><p><strong>rKB/s:</strong></p><p><strong>每秒发送到设备的读取请求数</strong></p><p><strong>wKB/S:</strong></p><p><strong>每秒发送到设备的写入请求数</strong></p><p>avgrq-sz：</p><p>平均请求扇区的大小</p><p>avgqu-sz：</p><p>平均请求队列的长度。毫无疑问，队列长度越短越好。</p><p>await:</p><p>每一个IO请求的处理的平均时间(单位是微秒毫秒)。</p><p>svctm：</p><p>表示平均每次设备I/O操作的服务时间(以毫秒为单位)</p><p><strong>%util:</strong></p><p><strong>磁盘利用率</strong></p><h2 id="网络状态监控"><a href="#网络状态监控" class="headerlink" title="网络状态监控"></a>网络状态监控</h2><ul><li>可以使用sar命令查看网络的相关统计（sar命令十分复杂，目前仅简单用于统计网络）</li></ul><p>语法：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar -<span class="built_in">n</span> DEV num1 num2</span><br></pre></td></tr></table></figure><p>选项：-n，查看网络，DEV表示查看网络接口</p><p>num1：刷新间隔（不填就查看一次结束） </p><p>num2：查看次数（不填无限次数）</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216132905028.png" alt="image-20241216132905028"></p><p>信息解读：</p><ul><li>IFACE：本地网卡接口的名称</li><li>rxpck/s：每秒钟接受的数据包</li><li>txpck/s：每秒钟发送的数据包</li><li><strong>rxKB/s：每秒钟接受的数据包大小，单位为KB</strong></li><li><strong>txKB/s：每秒钟发送的数据包大小，单位为KB</strong></li><li>rxcmp/s：每秒钟接受的压缩数据包</li><li>txcmp/s：每秒钟发送的压缩包</li><li>rxmcst/s：每秒钟接收的多播数据包</li></ul><h1 id="环境变量PATH"><a href="#环境变量PATH" class="headerlink" title="环境变量PATH"></a>环境变量PATH</h1><h2 id="环境变量作用"><a href="#环境变量作用" class="headerlink" title="环境变量作用"></a>环境变量作用</h2><p>环境变量是操作系统在运行的时候，记录的一些关键性信息，用以辅助系统运行。</p><p>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种KeyValue型结构，如：<img src="D:\学习资料\实验室培训\运维\image\image-20241216145304856.png" alt="image-20241216145304856"></p><p>图中记录了：</p><ul><li>HOME：/root，用户的HOME路径</li><li>USER: root，当前的操作用户</li><li>PWD：当前工作路径</li><li>…</li></ul><p>等等一系列信息，用于辅助系统在运行的时候从环境变量中获取关键信息</p><p>无论当前工作目录是什么，都能执行/usr/bin/cd这个程序，这个就是借助环境变量中：PATH这个项目的值来做到的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216145905838.png" alt="image-20241216145905838"></p><p>PATH记录了系<strong>统执行任何命令的搜索路径，</strong>如上图记录了（<strong>路径之间以：隔开</strong>）</p><ul><li>/usr/local/sbin</li><li>/usr/local/bin</li><li>/sbin/</li><li>/bin</li><li>/usr/sbin</li><li>/usr/bin</li><li>/root/bin</li></ul><p>当执行任何命令时，都会按照顺序，从上述路径中搜索要执行的程序的本体。</p><p>比如执行cd命令，就从第二个目录/usr/bin中搜索到了cd命令，并执行</p><h2 id="符号-的作用"><a href="#符号-的作用" class="headerlink" title="符号$的作用"></a>符号$的作用</h2><p>在Linux系统中，$符号被用于取”变量“的值。</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。</p><p>取得环境变量的值就可以通过语法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$环</span>境变量名</span><br></pre></td></tr></table></figure><p>来取得</p><p>比如：echo $PATH</p><p>就可以取得PATH这个环境变量的值，并通过echo语句输出出来</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216151334129.png" alt="image-20241216151334129"></p><p>又或者：echo ${PATH}ABC</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216151611813.png" alt="image-20241216151611813"></p><p>当和其他内容混合在一起的时候，可以通过{}来标注取的变量是谁</p><h2 id="在Linux中配置环境变量"><a href="#在Linux中配置环境变量" class="headerlink" title="在Linux中配置环境变量"></a>在Linux中配置环境变量</h2><h3 id="Linux环境变量可以用户自行设置"><a href="#Linux环境变量可以用户自行设置" class="headerlink" title="Linux环境变量可以用户自行设置"></a>Linux环境变量可以用户自行设置</h3><p>其中分为：</p><ul><li><p>临时设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="built_in">export</span> 变量名=变量值</span><br></pre></td></tr></table></figure></li><li><p>永久生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·针对当前用户生效，配置在当前用户的：~/.bashrc文件中</span><br><span class="line">·针对所有用户生效，配置在系统中：/etc/profile文件中</span><br><span class="line">·并通过语法：<span class="built_in">source</span> 配置文件 ，进行立刻生效，或重新登陆FinalShell生效</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义环境变量PATH"><a href="#自定义环境变量PATH" class="headerlink" title="自定义环境变量PATH"></a>自定义环境变量PATH</h3><p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。</p><p>这些搜索路径我们也可以自行添加到PATH中去。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:自定义路径</span><br></pre></td></tr></table></figure><h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><p>在Finalshell软件的下方窗体中，提供了Liunx的文件系统视图，可以方便的上传和下载：</p><ul><li>在Finalshell中浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</li><li>浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241218164621375.png" alt="image-20241218164621375"></p><h2 id="rz、sz命令"><a href="#rz、sz命令" class="headerlink" title="rz、sz命令"></a>rz、sz命令</h2><p>可以通过rz、sz命令进行文件传输</p><p>安装语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> lrzsz</span><br></pre></td></tr></table></figure><ul><li><p>rz命令，进行上传，语法：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rz</span></span><br></pre></td></tr></table></figure></li><li><p>sz命令下载，语法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sz</span> 要下载的文件</span><br></pre></td></tr></table></figure><p>文件会自动下载到桌面的：fsdownload文件夹中</p></li></ul><h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><h2 id="tar命令压缩或解压tar或gzip文件"><a href="#tar命令压缩或解压tar或gzip文件" class="headerlink" title="tar命令压缩或解压tar或gzip文件"></a>tar命令压缩或解压tar或gzip文件</h2><p>Linux和Mac系统常用有2种压缩格式，后缀分别是：</p><ul><li>.tar，称之为tarball，<strong>归档</strong>文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li>.gz，也常见为.tar.gz，.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><p>针对这两种格式，使用tar命令均可以进行压缩和解压的操作</p><p>语法：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [-<span class="keyword">c</span> -v -<span class="keyword">x</span> -f -z -C]参数<span class="number">1</span> 参数<span class="number">2</span> ... 参数N</span><br></pre></td></tr></table></figure><ul><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z，gzip模式，不使用-z就是普通的tarball格式</li><li>-C，选择解压的目的地，用于解压模式</li></ul><h3 id="tar命令压缩"><a href="#tar命令压缩" class="headerlink" title="tar命令压缩"></a>tar命令压缩</h3><p>tar的常用组合为：</p><ul><li>tar -cvf test.tar 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar文件内</p><ul><li>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</p><p>注意：</p><ul><li>-z选项，如果使用的话，一般处于选项位第一个</li><li>-f选项，<strong>必须</strong>在选项位最后一个</li></ul><h3 id="tar解压"><a href="#tar解压" class="headerlink" title="tar解压"></a>tar解压</h3><p>常用的tar解压组合有：</p><ul><li>tar -xvf test.tar</li></ul><p>解压test.tar，将文件解压至当前目录</p><ul><li>tar -xvf test.tar -C /home/itheima</li></ul><p>解压test.tar，将文件解压至指定目录（/home/itheima）</p><ul><li>tar -zxvf test.tar.gz，将文件解压到指定目录（/home/itheima）</li></ul><p>注意：</p><ul><li>-f选项，必须在选项组合体的组后一位</li><li>-z选项，建议在开头位置</li><li>-C选项单独使用，和解压所需的其他参数分开</li></ul><h2 id="zip、unzip命令压缩或解压zip文件"><a href="#zip、unzip命令压缩或解压zip文件" class="headerlink" title="zip、unzip命令压缩或解压zip文件"></a>zip、unzip命令压缩或解压zip文件</h2><h3 id="zip命令压缩文件"><a href="#zip命令压缩文件" class="headerlink" title="zip命令压缩文件"></a>zip命令压缩文件</h3><p>可以使用zip命令，压缩文件位zip压缩包</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip <span class="selector-attr">[-r]</span> 参数<span class="number">0</span> 参数<span class="number">1</span> 参数<span class="number">2</span> ... 参数N</span><br></pre></td></tr></table></figure><ul><li>-r，被压缩的包含文件夹的时候，需要使用-r选项，和rm，cp等命令的-r效果一致</li><li>参数0，是创建的压缩包的名字，后面的参数是被压缩的文件</li></ul><p>如：</p><ul><li>zip test.zip a.txt b.txt c.txt</li></ul><p>将a.txt b.txt c.txt压缩到test.zip文件内</p><ul><li>zip -r test.zip test itheima a.txt</li></ul><p>将test、itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p><h3 id="unzip命令解压文件"><a href="#unzip命令解压文件" class="headerlink" title="unzip命令解压文件"></a>unzip命令解压文件</h3><p>使用unzip命令，可以方便的解压zip压缩包</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip <span class="selector-attr">[-d]</span> 参数</span><br></pre></td></tr></table></figure><ul><li>-d，指定要解压去的位置，同tar的-C选项</li><li>参数，被解压的zip压缩包文件</li></ul><p>示例：</p><ul><li>unzip test.zip   将test.zip解压到当前目录</li><li>unzip test.zip -d /home/itheima，将test.zip解压到指定文件夹内（/home/itheima）</li></ul><p>注意：</p><p><strong>解压的时候，同名文件会被覆盖</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各类小技巧快捷键&quot;&gt;&lt;a href=&quot;#各类小技巧快捷键&quot; class=&quot;headerlink&quot; title=&quot;各类小技巧快捷键&quot;&gt;&lt;/a&gt;各类小技巧快捷键&lt;/h1&gt;&lt;h2 id=&quot;ctrl-c-强制停止&quot;&gt;&lt;a href=&quot;#ctrl-c-强制停止&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2025-01-16T02:46:06.000Z</published>
    <updated>2025-01-16T02:46:54.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h1><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208142013596.png" alt="image-20241208142013596"></p><p>只有一个树形结构</p><p>根目录为‘/’，所有的文件都在它下面</p><p>注意：开头的/表示根目录</p><p>后面的/表示层级关系</p><h6 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a><strong>远程连接</strong></h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在虚拟机终端中输入：ifconfig</span><br><span class="line">找到end33中的<span class="built_in">IP</span>地址</span><br><span class="line">在FinalShell中链接虚拟机</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="命令与命令行的区别"><a href="#命令与命令行的区别" class="headerlink" title="命令与命令行的区别"></a>命令与命令行的区别</h6><p>学习Linux，本质上是学习在命令行下熟练使用Linux的各类命令。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行：即Linux终端（Terminal），是一种命令提示符页面。以纯“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：即Linuxc程序。一个命令就是一个Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</span><br></pre></td></tr></table></figure><h6 id="命令的通用格式"><a href="#命令的通用格式" class="headerlink" title="命令的通用格式"></a>命令的通用格式</h6><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conmmand <span class="comment">[-options]</span> <span class="comment">[parameter]</span></span><br><span class="line">·command:命令本身</span><br><span class="line">·options:<span class="comment">[可选，非必填]</span>命令的一些选项，可以通过选项控制命令的行为细节</span><br><span class="line">·parameter：<span class="comment">[可选，非必填]</span>命令的参数。多数用于命令的指向目标等</span><br><span class="line">语法中的<span class="comment">[]</span>表示可选的意思</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">·<span class="built_in">ls</span> -l/home/itheima     <span class="built_in">ls</span>是命令本身，-l是选项，/home/itheima是参数</span><br><span class="line">·意思是：以列表的形式，显示/home/itheima目录内的内容</span><br><span class="line">·<span class="built_in">cp</span> -r test1 test2     <span class="built_in">cp</span>是命令本身，-r是选项，test1和test2是参数</span><br><span class="line">·意思是：复制文件夹test1 成为test2</span><br></pre></td></tr></table></figure><h1 id="命令基础"><a href="#命令基础" class="headerlink" title="命令基础"></a>命令基础</h1><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><h3 id="ls命令基本定义"><a href="#ls命令基本定义" class="headerlink" title="ls命令基本定义"></a>ls命令基本定义</h3><p>ls命令的作用是在命令行中，以平铺的形式，展示当前工作目录（默认HOME目录）下的内容（文件或者文件夹），语法细节如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="selector-attr">[-a -l -h]</span><span class="selector-attr">[Linux路径]</span></span><br></pre></td></tr></table></figure><ul><li><p>-a  -l  -h 是<strong>可选</strong>的选项</p></li><li><p>Linux路径是此命令<strong>可选</strong>的参数</p></li></ul><p>当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出<strong>当前工作目录</strong>下的内容</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208143245339.png" alt="image-20241208143245339"></p><p><strong>注意：</strong></p><p>Linux系统的命令行终端，在启动的时候，默认会加载：</p><ul><li><p>当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的是HOME目录的内容</p></li><li><p>HOME目录：每个Linux操作用户在Linux系统的<strong>个人账户目录</strong>（专属目录），路径在：/home/用户名</p></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">·如，图中的Linux用户是daihongsong，其HOME目录是：/home/daihongsong</span><br><span class="line">·Windows系统和Linux系统。均设有用户的HOME目录</span><br></pre></td></tr></table></figure><h3 id="ls命令的参数"><a href="#ls命令的参数" class="headerlink" title="ls命令的参数"></a>ls命令的参数</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="selector-attr">[-a -l -h]</span><span class="selector-attr">[Linux路径]</span></span><br></pre></td></tr></table></figure><ul><li><p>当ls不使用参数，表示列出：当前工作目录的内容，即用户的HOME目录。</p></li><li><p>当使用参数。ls命令的参数表示：指定一个Linux路径，列出指定路径的内容</p></li></ul><p>如：</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208144746163.png" alt="image-20241208144746163"></p><p>通过ls / 列出根目录的内容</p><h3 id="ls命令的-a选项"><a href="#ls命令的-a选项" class="headerlink" title="ls命令的 -a选项"></a>ls命令的 -a选项</h3><p>-a 选项，表示all的意思，即列出全部文件（包含隐藏的文件/文件夹）</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208144955840.png" alt="image-20241208144955840"></p><p>可以看到，ls -a 对比 ls 列出的内容更多。</p><ul><li><p>图中以 . 开头的，表示是Linux系统的隐藏文件/文件夹（只要以 . 开头，就自动隐藏）</p></li><li><p>只有通过 -a 选项，才能看到这些隐藏的文件/文件夹</p></li></ul><h3 id="ls命令的-l-选项"><a href="#ls命令的-l-选项" class="headerlink" title="ls命令的 -l 选项"></a>ls命令的 -l 选项</h3><ul><li>-l 选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208145714564.png" alt="image-20241208145714564"></p><h4 id="ls选项可以混合使用"><a href="#ls选项可以混合使用" class="headerlink" title="ls选项可以混合使用"></a>ls选项可以混合使用</h4><p>如： -a 和 -l 可以组合应用</p><p>写法： </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·<span class="keyword">ls</span> -<span class="keyword">l</span>-<span class="keyword">a</span></span><br><span class="line">·<span class="keyword">ls</span> -<span class="keyword">la</span></span><br><span class="line">·<span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure><p>三种写法都是一样的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150011375.png" alt="image-20241208150011375"></p><h4 id="ls选项和参数的组合使用"><a href="#ls选项和参数的组合使用" class="headerlink" title="ls选项和参数的组合使用"></a>ls选项和参数的组合使用</h4><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150105486.png" alt="image-20241208150105486"></p><h3 id="ls命令的-h选项"><a href="#ls命令的-h选项" class="headerlink" title="ls命令的 -h选项"></a>ls命令的 -h选项</h3><ul><li><p>-h 表示以易于阅读的形式，列出文件大小，如K, M , G</p></li><li><p>-h 选项必须要搭配 -l 一起使用 </p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150518225.png" alt="image-20241208150518225"></p><h2 id="目录切换相关命令（cd-pwd）"><a href="#目录切换相关命令（cd-pwd）" class="headerlink" title="目录切换相关命令（cd / pwd）"></a>目录切换相关命令（cd / pwd）</h2><h3 id="cd命令-切换工作目录"><a href="#cd命令-切换工作目录" class="headerlink" title="cd命令 切换工作目录"></a>cd命令 切换工作目录</h3><p>cd命令来自英文：Change Directory</p><p><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>[Linux路径]</span><br></pre></td></tr></table></figure><ul><li><p>cd命令无需选项，只有参数，表示要切换到哪个目录下</p></li><li><p>cd命令直接执行，不写参数，表示返回到用户的HOME目录</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208151406232.png" alt="image-20241208151406232"></p><h3 id="pwd命令查看当前工作目录"><a href="#pwd命令查看当前工作目录" class="headerlink" title="pwd命令查看当前工作目录"></a>pwd命令查看当前工作目录</h3><p>通过ls来验证当前的工作目录，其实是不恰当的</p><p>我们可以通过pwd命令，来查看当前所在的工作目录</p><p>pwd命令来自：Print Work Directory</p><p><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><ul><li>pwd命令，无选项，无参数，直接输入pwd即可</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208151823741.png" alt="image-20241208151823741"></p><h2 id="相对路径、绝对路径和特殊路径符"><a href="#相对路径、绝对路径和特殊路径符" class="headerlink" title="相对路径、绝对路径和特殊路径符"></a>相对路径、绝对路径和特殊路径符</h2><p><strong>比如进入Desktop</strong></p><p><strong>· cd Desktop     相对路径写法</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208152751806.png" alt="image-20241208152751806"></p><p><strong>·cd/home/daihongsong/Desktop  绝对路径写法</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208152905027.png" alt="image-20241208152905027"></p><h3 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a><strong>相对路径</strong>：</h3><p>以<strong>当前目录为起点</strong>，描述路径的一种写法，路径描述<strong>无需</strong>以 / 开头</p><h3 id="绝对路径："><a href="#绝对路径：" class="headerlink" title="绝对路径："></a><strong>绝对路径</strong>：</h3><p>以<strong>根目录为起点</strong>，描述路径的一种写法，路径描述以 / 开头</p><h3 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.    表示当前目录。比如<span class="keyword">cd</span> <span class="string">./Desktop</span>表示切换到当前目录下的Desktop目录内，和<span class="keyword">cd</span> Desktop效果一致</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">..</span>   表示上一级目录，比如：<span class="keyword">cd</span> <span class="string">..</span> 即可切换到上一级目录，<span class="keyword">cd</span> <span class="string">../..</span>切换到上二级的目录</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~    表示HOME目录，比如<span class="keyword">cd</span> ~    即可切换到HOME目录或<span class="keyword">cd</span>~<span class="string">/Desktop</span>，切换到HOME内的Desktop目录</span><br></pre></td></tr></table></figure><h2 id="mkdir命令创建目录（文件夹）"><a href="#mkdir命令创建目录（文件夹）" class="headerlink" title="mkdir命令创建目录（文件夹）"></a>mkdir命令创建目录（文件夹）</h2><p>mkdir来自英文：<strong>M</strong>a<strong>k</strong>e <strong>Dir</strong>ectory</p><p><strong>语法：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-p] Linux路径</span><br></pre></td></tr></table></figure><p>· 参数<strong>必填</strong> 。表示Linux路径，即要创建的文件夹的路径，相对路径和绝对路径均可</p><p>· -p选项<strong>可选</strong>，表示<strong>自动创建不存在的父目录</strong>，适用于创建<strong>连续多层级</strong>的目录</p><p>注意：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作，涉及到权限问题，HOME外无法成功</p><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="touch命令创建文件"><a href="#touch命令创建文件" class="headerlink" title="touch命令创建文件"></a>touch命令创建文件</h3><p>可以通过touch命令创建文件</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> Linux路径</span><br></pre></td></tr></table></figure><p>·touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208161510800.png" alt="image-20241208161510800"></p><h4 id="文件夹和文件的分辨"><a href="#文件夹和文件的分辨" class="headerlink" title="文件夹和文件的分辨"></a>文件夹和文件的分辨</h4><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208161628202.png" alt="image-20241208161628202"></p><p>第一列中   d   开头的是文件夹</p><p>-开头是文件</p><h3 id="cat命令查看文件内容"><a href="#cat命令查看文件内容" class="headerlink" title="cat命令查看文件内容"></a>cat命令查看文件内容</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> Linux路径</span><br></pre></td></tr></table></figure><ul><li>cat没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208162405365.png" alt="image-20241208162405365"></p><h3 id="more命令查看文件内容"><a href="#more命令查看文件内容" class="headerlink" title="more命令查看文件内容"></a>more命令查看文件内容</h3><p>同cat的区别：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><p><strong>语法：</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">more</span> Linux路径</span><br></pre></td></tr></table></figure><ul><li><p>没有选项，只有必填参数：被查看的文件路径，相对、绝对、特殊路径符都可以使用</p></li><li><p>在查看的过程中，通过<strong>空格</strong>翻页</p></li><li>通过 q 退出查看</li></ul><h3 id="cp命令-复制文件-文件夹"><a href="#cp命令-复制文件-文件夹" class="headerlink" title="cp命令 复制文件/文件夹"></a>cp命令 复制文件/文件夹</h3><p>cp命令可以用于复制文件、文件夹</p><p>cp命令来自于：<strong>c</strong>o<strong>p</strong>y</p><p>语法：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> [-r] 参数<span class="number">1</span> 参数<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件/文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li></ul><h3 id="mv命令移动文件-文件夹"><a href="#mv命令移动文件-文件夹" class="headerlink" title="mv命令移动文件/文件夹"></a>mv命令移动文件/文件夹</h3><p>mv命令可以用于移动文件/文件夹</p><p>mv命令来自：<strong>m</strong>o<strong>v</strong>e</p><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mv</span> 参数<span class="number">1</span>  参数<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，<strong>确保目标存在</strong></li></ul><h3 id="rm删除文件-文件夹"><a href="#rm删除文件-文件夹" class="headerlink" title="rm删除文件/文件夹"></a>rm删除文件/文件夹</h3><p>rm命令可以用于删除文件/文件夹</p><p>rm命令来自：<strong>r</strong>e<strong>m</strong>ove</p><p><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-r -f] 参数1 参数2 ...... 参数N </span><br></pre></td></tr></table></figure><ul><li>同cp命令一样，-r 选项用于删除文件夹</li><li>-f  表示force，强制删除（不会弹出提示确认信息）<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li><li>使用一般用户用不到-f 选项</li></ul></li><li>参数1、 参数2、 …… 、参数N   表示要删除的文件/文件夹路径，按照空格隔开</li></ul><h4 id="rm命令-通配符"><a href="#rm命令-通配符" class="headerlink" title="rm命令-通配符"></a>rm命令-通配符</h4><p>rm命令支持通配符*，用来做<strong>模糊匹配</strong></p><ul><li>符号 * 表示通配符，即匹配任意内容（包含空），示例：</li><li>test*，表示匹配任何<strong>以test开头</strong>的内容</li><li>*test，表示匹配任何<strong>以test结尾</strong>的内容</li><li><em>test </em>，表示匹配任何<strong>包含test</strong>的内容 </li></ul><h4 id="强制删除-f选项"><a href="#强制删除-f选项" class="headerlink" title="强制删除 -f选项"></a>强制删除 -f选项</h4><ul><li>可以通过su - root，并输入密码（和普通用户默认一样）临时切换到root用户体验</li><li>通过输入 exit 命令，返回普通用户</li></ul><p>rm是一个危险的命令，特别是在处于root（超级管理员）用户的时候，要谨慎使用。</p><p><strong>如下命令，千万不要在root管理员用户下执行：</strong></p><p><strong>rm -rf/</strong></p><p><strong>rm -rf/*</strong></p><p><strong>效果等同于在Windows上执行C盘格式化</strong></p><h3 id="查找命令（which-find）"><a href="#查找命令（which-find）" class="headerlink" title="查找命令（which , find）"></a>查找命令（which , find）</h3><h4 id="which命令-查命令"><a href="#which命令-查命令" class="headerlink" title="which命令 查命令"></a>which命令 查命令</h4><p>Linux命令的本体就是一个个的二进制可执行程序</p><p>和Windows系统中的.exe文件是一个意思</p><p>我们可以通过which命令，查看所使用的一系列命令的程序文件存放的位置</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> 要查找的命令</span><br></pre></td></tr></table></figure><h4 id="find命令-查文件"><a href="#find命令-查文件" class="headerlink" title="find命令 查文件"></a>find命令 查文件</h4><p>通过find命令去搜索指定的文件</p><p>语法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> 起始路径  -name “被查找文件名”</span><br></pre></td></tr></table></figure><p>为了确保拥有最大的权限，可以在整个系统完成搜索，可以临时切换到root用户来获得管理员权限</p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>根据语法 ： <strong>find 起始路径 -name “被查找文件名”</strong></p><p>被查找文件名，支持使用通配符*来做模糊查询</p><ul><li>符号 * 表示通配符，即匹配任意内容（包含空），示例：</li><li>test*，表示匹配任何<strong>以test开头</strong>的内容</li><li>*test，表示匹配任何<strong>以test结尾</strong>的内容</li><li><em>test </em>，表示匹配任何<strong>包含test</strong>的内容 </li></ul><p>基于通配符的含义，可以结合find命令做文件的模糊查询</p><h5 id="find命令-按文件大小查找文件"><a href="#find命令-按文件大小查找文件" class="headerlink" title="find命令-按文件大小查找文件"></a>find命令-按文件大小查找文件</h5><p>语法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 起始路径 -size +|-n[kMG]</span><br></pre></td></tr></table></figure><ul><li>+、- 表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li></ul><p>示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·查找小于<span class="number">10</span>kB的文件：find/ -size <span class="number">-10</span>k</span><br><span class="line">·查找大于<span class="number">100</span>MB的文件：find/ -size <span class="number">+100</span>M</span><br><span class="line">·查找大于<span class="number">1</span>GB的文件：find/ -size <span class="number">+1</span>G</span><br></pre></td></tr></table></figure><p>ctrl + c 强制停止搜索</p><h3 id="grep、wc和管道符"><a href="#grep、wc和管道符" class="headerlink" title="grep、wc和管道符"></a>grep、wc和管道符</h3><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p>可以通过grep命令，从文件中通过关键字过滤文件行</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="selector-attr">[-n]</span> 关键字 文件路径</span><br></pre></td></tr></table></figure><ul><li>选项 -n ，可选，表示在结果中显示匹配的行的行号</li><li>参数、关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用“ ”将关键字包围起来</li><li>参数、文件路径，必填，表示要过滤内容的文件路径，<strong>可作为内容输入端口</strong></li></ul><h4 id="wc命令-做数量统计"><a href="#wc命令-做数量统计" class="headerlink" title="wc命令 做数量统计"></a>wc命令 做数量统计</h4><p>可以通过wc命令统计文件的行数、单词数量等</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wc</span>[-c -m -l -w] 文件路径</span><br></pre></td></tr></table></figure><ul><li>选项，-c ，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l ， 统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，<strong>可以作为内容输入端口</strong>（可以做管道符的输入）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不加选项时，输出：</span><br><span class="line">行数  单词数 字节数 文件路径</span><br></pre></td></tr></table></figure><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符   |"></a>管道符   |</h4><p>含义：将管道符左边命令的结果，作为右边命令的输入</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208214214600.png" alt="image-20241208214214600"></p><p>如上图：</p><ul><li>cat test.txt的输出结果（文件内容）</li><li>作为右边grep命令的输入（被过滤文件）</li></ul><p>管道符可以进行嵌套</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208215252494.png" alt="image-20241208215252494"></p><h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>可以使用echo命令在命令行内输出指定内容</p><p>类似于编程中的print语句</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 输出的内容</span><br></pre></td></tr></table></figure><ul><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用“ ”包围</li><li>在终端上显示：Hello Linux</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208215847459.png" alt="image-20241208215847459"></p><ul><li><ul><li>带有空格或 \ 等特殊符号，建议使用双引号包围</li><li>因为不包围的话，空格后容易被识别为参数2，尽管echo不受影响，但要养成习惯</li></ul></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220245400.png" alt="image-20241208220245400"></p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号 `"></a>反引号 `</h3><p>如下的命令：echo pwd</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220511294.png" alt="image-20241208220511294"></p><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了。</p><p>我们可以通过命令用反引号（通常也称之为飘号）` 将其包围</p><p>被 ` 包围的内容，会被作为命令执行，而非普通字符</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220702778.png" alt="image-20241208220702778"></p><h3 id="重定向符-gt-和-gt-gt"><a href="#重定向符-gt-和-gt-gt" class="headerlink" title="重定向符 &gt;和&gt;&gt;"></a>重定向符 &gt;和&gt;&gt;</h3><ul><li>“&gt;”。将左侧命令的结果，<strong>覆盖</strong>写入到符号右侧指定的文件中</li><li>“&gt;&gt;”，将左侧命令的结果，<strong>追加</strong>写入到符号右侧指定的文件中</li></ul><p>演示：</p><ul><li>echo “Hello Linux” &gt; itheima.txt</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000029623.png" alt="image-20241209000029623"></p><ul><li>echo”Hello itheima” &gt; itheima.txt ，再次执行。覆盖新内容</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000127248.png" alt="image-20241209000127248"></p><ul><li>echo”Hello itcast” &gt;&gt; itheima.txt，再次执行，使用&gt;&gt;追加新内容</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000214393.png" alt="image-20241209000214393"></p><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> [-f -num] Linux路径</span><br></pre></td></tr></table></figure><ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持续跟踪</li><li>选项，-num（填具体查看行数），表示查看尾部多少行，不填默认10行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;D:&#92;学习资料&#92;实验室培训&#92;运维&#92;image&#92;image-202412</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My First Post</title>
    <link href="https://a1smile.github.io/blog/2025/01/15/My-First-Post/"/>
    <id>https://a1smile.github.io/blog/2025/01/15/My-First-Post/</id>
    <published>2025-01-15T03:44:38.000Z</published>
    <updated>2025-01-15T03:44:38.453Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://a1smile.github.io/blog/2025/01/15/hello-world/"/>
    <id>https://a1smile.github.io/blog/2025/01/15/hello-world/</id>
    <published>2025-01-15T03:10:51.706Z</published>
    <updated>2025-01-15T03:00:07.609Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
