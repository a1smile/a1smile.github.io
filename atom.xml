<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My blog</title>
  
  <subtitle>A personal blog</subtitle>
  <link href="https://a1smile.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://a1smile.github.io/blog/"/>
  <updated>2025-01-16T02:51:17.512Z</updated>
  <id>https://a1smile.github.io/blog/</id>
  
  <author>
    <name>代洪嵩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git和docker常用命令</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/git%E5%92%8Cdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/git%E5%92%8Cdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2025-01-16T02:50:28.000Z</published>
    <updated>2025-01-16T02:51:17.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">初始化和配置</span><br><span class="line"></span><br><span class="line">git init: 初始化一个新的Git仓库。</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;xxx&quot;: 配置全局用户名。</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;: 配置全局用户邮箱。</span><br><span class="line"></span><br><span class="line">基本操作</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt;: 将文件添加到暂存区。</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;message&#x27;: 提交暂存区的内容到仓库。</span><br><span class="line"></span><br><span class="line">git status: 查看仓g库当前状态，显示有变更的文件。</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt;: 从仓库中删除文件。</span><br><span class="line"></span><br><span class="line">git log: 查看提交历史。</span><br><span class="line"></span><br><span class="line">git reset --&lt;soft&gt;&lt;hard&gt;[mixed]: 回退</span><br><span class="line"></span><br><span class="line">git ls-files  : 查看暂存区内容</span><br><span class="line"></span><br><span class="line">rm &lt;file&gt;   ： 删除工作区文件</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; 删除暂存区和工作区 文件</span><br><span class="line"></span><br><span class="line">git rm -- cache &lt;file&gt; :删除暂存区</span><br><span class="line"></span><br><span class="line">分支管理</span><br><span class="line"></span><br><span class="line">git branch: 列出所有本地分支。</span><br><span class="line"></span><br><span class="line">git checkout &lt;branch&gt;: 切换到指定分支。</span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;: 合并指定分支到当前分支。</span><br><span class="line"></span><br><span class="line">git branch -d &lt;branch&gt;: 删除本地分支。</span><br><span class="line"></span><br><span class="line">远程仓库</span><br><span class="line"></span><br><span class="line">git clone &lt;url&gt;: 克隆远程仓库。</span><br><span class="line"></span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;: 将本地分支推送到远程仓库。</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;: 从远程仓库拉取最新内容并合并到本地分支。</span><br><span class="line"></span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;: 添加新的远程仓库。</span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">命令            说明             文档地址</span><br><span class="line">docker pull    拉取镜像   docker pull</span><br><span class="line">docker push    推送镜像到      DockerRegistrydocker push</span><br><span class="line">docker images查看本地镜像 docker images</span><br><span class="line">docker rmi    删除本地镜像docker rmi</span><br><span class="line">docker run    创建并运行容器（不能重复创建）docker run</span><br><span class="line">docker stop    停止指定容器docker stop</span><br><span class="line">docker start启动指定容器docker start</span><br><span class="line">docker restart重新启动容器docker restart</span><br><span class="line">docker rm    删除指定容器docs.docker.com</span><br><span class="line">docker ps    查看容器  docker ps</span><br><span class="line">docker logs    查看容器运行日志   docker logs</span><br><span class="line">docker exec    进入容器  docker exec</span><br><span class="line">docker save    保存镜像到本地压缩文件docker save</span><br><span class="line">docker load    加载本地压缩文件到镜像docker load</span><br><span class="line">docker inspect查看容器详细信息docker inspect</span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令                     说明        文档地址</span><br><span class="line">docker network create创建一个网络docker network create</span><br><span class="line">docker network ls    查看所有网络docs.docker.com</span><br><span class="line">docker network rm    删除指定网络docs.docker.com</span><br><span class="line">docker network prune清除未使用的网络docs.docker.com</span><br><span class="line">docker network connect使指定容器连接加入某网络docs.docker.com</span><br><span class="line">docker network disconnect使指定容器连接离开某网络docker network disconnect</span><br><span class="line">docker network inspect查看网络详细信息docker network inspect</span><br></pre></td></tr></table></figure><h2 id="DockerCompose是什么，如何编写一个Dockerfile"><a href="#DockerCompose是什么，如何编写一个Dockerfile" class="headerlink" title="DockerCompose是什么，如何编写一个Dockerfile"></a>DockerCompose是什么，如何编写一个Dockerfile</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">指令    说明     示例</span><br><span class="line">FROM指定基础镜像FROM centos:6</span><br><span class="line">ENV设置环境变量，可在后面指令使用ENV key value</span><br><span class="line">COPY拷贝本地文件到镜像的指定目录COPY ./xx.jar /tmp/app.jar</span><br><span class="line">RUN执行Linux的shell命令，一般是安装过程的命令RUN yum install gcc</span><br><span class="line">EXPOSE指定容器运行时监听的端口，是给镜像使用者看的EXPOSE 8080</span><br><span class="line">ENTRYPOINT镜像中应用的启动命令，容器运行时调用ENTRYPOINT java -jar xx.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git常用指令&quot;&gt;&lt;a href=&quot;#git常用指令&quot; class=&quot;headerlink&quot; title=&quot;git常用指令&quot;&gt;&lt;/a&gt;git常用指令&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VI编辑器</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/VI%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/VI%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2025-01-16T02:49:34.000Z</published>
    <updated>2025-01-16T02:49:43.909Z</updated>
    
    <content type="html"><![CDATA[<p>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</p><p>同图形化界面中的 文本编辑器 一样，vi是命令行下对文本文件进行编辑的绝佳选择</p><p>vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且具有shell程序编辑的功能，可以通过不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p><h1 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h1><p><strong>命令模式(Command mode)</strong></p><ul><li><p>命令模式下，所敲的按键，编辑器都理解为命令，以命令驱动执行不同的功能。</p></li><li><p>此模式下，不能自由进行文本编辑。</p></li></ul><p><strong>输入模式(Insert mode)</strong></p><ul><li><p>也就是编辑模式、插入模式。</p></li><li><p>此模式下，可以对文件内容进行自由编辑。</p></li></ul><p><strong>底线命令模式(Last line mode)</strong></p><ul><li>整体文件的控制，通常用于文件的保存、退出。</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209105244902.png" alt="image-20241209105244902"></p><h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><p>如果需要通过vi\vim编辑器编辑文件，需要以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi 文件路径</span><br><span class="line">vim 文件路径</span><br></pre></td></tr></table></figure><p>vim兼容全部的vi功能</p><ul><li><p>如果文件路径表示的文件<strong>不存在</strong>，那么此命令会用于<strong>编辑新文件</strong></p></li><li><p>如果文件路径表示的文件<strong>存在</strong>，那么此命令用于<strong>编辑已有文件</strong></p></li></ul><p>通过vi/vim命令编辑文件,会打开一个新的窗口,此时这个窗口就是:命令模式窗口</p><p>命令模式是vi编辑器的入口和出口</p><ul><li><p>进入vi编辑器会进入命令模式</p></li><li><p>通过命令模式输入键盘指令,可以进入输入模式</p></li><li><p>输入模式需要退同到命令模式,然后通过命令可以进入底线命令模式</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209110542169.png" alt="image-20241209110542169"></p><ul><li>在命令模式内，按键盘 i ，进入输入模式</li><li>在输入模式内按 esc 回退到命令模式</li><li>在命令模式内按键盘 ： 进入底线命令模式</li><li>在底线命令模式内输入  :wq ，保存文件并退出vi编辑器</li></ul><p>w是保存，q是退出</p><h1 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h1><h2 id="命令模式进入输入模式"><a href="#命令模式进入输入模式" class="headerlink" title="命令模式进入输入模式"></a>命令模式进入输入模式</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在当前光标位置进入输入模式</td></tr><tr><td>a</td><td>在当前光标位置之后进入输入模式</td></tr><tr><td>I</td><td>在当前行的开头，进入输入模式</td></tr><tr><td>A</td><td>在当前行的结尾，进入输入模式</td></tr><tr><td>o（字母）</td><td>在当前光标插入下一行进入输入模式</td></tr><tr><td>O（字母）</td><td>在当前光标插入上一行进入输入模式</td></tr><tr><td>r</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；</td></tr><tr><td>R</td><td>进入取代模式(Replace mode)：R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>esc</td><td>任何情况下输入<strong>esc</strong>都能回到命令模式</td></tr></tbody></table><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>键盘上、键盘k</td><td>向上移动光标</td></tr><tr><td>键盘下、键盘j</td><td>向下移动光标</td></tr><tr><td>键盘左、键盘h</td><td>向左移动光标</td></tr><tr><td>键盘右、键盘l</td><td>向右移动光标</td></tr><tr><td>pageup(pgUp)</td><td>向上翻页</td></tr><tr><td>pagedown(PgDn)</td><td>向下翻页</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td>0（数字）或[Home]键</td><td>移动光标到当前行的开头</td></tr><tr><td>$或[End]键</td><td>移动光标到当前行的结尾</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>跳到最后一行的第一个字符</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>跳到首行</td></tr><tr><td>n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><h2 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>x，X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除光标所在行的内容（常用）</td></tr><tr><td>ndd</td><td>n是数字，表示删除当前光标向下n行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制当前行（常用）</td></tr><tr><td>nyy</td><td>n是数字，复制当前行和下面的n行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>撤销修改，复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>反向撤销修改，重做上一个动作。(常用)</td></tr></tbody></table><h1 id="底线命令模式的命令"><a href="#底线命令模式的命令" class="headerlink" title="底线命令模式的命令"></a>底线命令模式的命令</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>:q</td><td>仅退出</td></tr><tr><td>:q!</td><td>强制退出</td></tr><tr><td>:w</td><td>仅保存，将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr><tr><td>:set paste</td><td>设置粘贴模式（适用于从外部复制内容，粘贴到内部）</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vi&#92;vim是visual interface的简称，是Linux中最经典的文本编辑器&lt;/p&gt;
&lt;p&gt;同图形化界面中的 文本编辑器 一样，vi是命令行下对文本文件进行编辑的绝佳选择&lt;/p&gt;
&lt;p&gt;vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且具有shell</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux用户和权限</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</id>
    <published>2025-01-16T02:48:27.000Z</published>
    <updated>2025-01-16T02:48:47.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h1><p>root（超级管理员）</p><p>拥有最大的系统权限</p><ul><li>普通用户的权限，一般在其HOME目录内是不受限的</li><li>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</li></ul><h2 id="su和exit命令"><a href="#su和exit命令" class="headerlink" title="su和exit命令"></a>su和exit命令</h2><p>su命令就是用于账户切换的系统命令，其来源英文单词：Switch User</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [-][用户名]</span><br></pre></td></tr></table></figure><ul><li>选项，-，符号是可选的，表示是否在切换用户后加载环境变量，<strong>建议带上</strong></li><li>参数：用户名。表示要切换的用户，用户名也可以省略，省略表示切换到root</li><li><strong>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl + d</strong></li><li>使用普通用户，切换到其他用户<strong>需要i输入密码</strong>，如切换到root用户</li><li>使用root用户切换到其他用户，<strong>无需密码</strong>，可以直接切换</li></ul><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p>为了避免长期使用root用户带来系统损坏，我们可以使用sudo命令，为普通的命令授权，临时以root身份执行</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo 其他命令</span><br></pre></td></tr></table></figure><ul><li>在其他命令之前，带上sudo，即可为这一条命令临时赋予root权限</li><li>但是并不是所有的用户都有权力使用sudo，我们<strong>需要为普通用户配置sudo认证</strong></li></ul><h2 id="为普通用户配置sudo认证"><a href="#为普通用户配置sudo认证" class="headerlink" title="为普通用户配置sudo认证"></a>为普通用户配置sudo认证</h2><ul><li><p>切换到root用户，执行 <strong>visudo</strong> 命令，会自动通过vi编辑器打开:/etc/sudoers 也可以输入 <strong>vi   /etc/sudoers</strong></p></li><li><p>在文件的最后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名 ALL =(ALL)   NOPASSWD: ALL</span><br></pre></td></tr></table></figure><ul><li>其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</li></ul></li><li><p>最后通过wq保存</p></li><li><p>切回到普通用户<img src="D:\学习资料\实验室培训\运维\image\image-20241209200205123.png" alt="image-20241209200205123"></p></li></ul><p>执行的命令均以root运行</p><h1 id="用户、用户组管理"><a href="#用户、用户组管理" class="headerlink" title="用户、用户组管理"></a>用户、用户组管理</h1><p>Linux系统中可以</p><ul><li>配置多个用户</li><li>配置多个用户组</li><li>用户可以加入多个用户组中</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209200659571.png" alt="image-20241209200659571"></p><p>Linux中关于<strong>权限的管控级别有2个级别</strong>，分别是：</p><ul><li>针对用户的权限控制（用户级别）</li><li>针对用户组的权限控制（用户组级别）</li></ul><p>比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。所以，我们需要学习在Linux中进行用户、用户组管理的基础命令。</p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><strong>以下命令需要root用户执行</strong></p><ul><li><p>创建用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure></li><li><p>删除用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><strong>以下命令需要root用户执行</strong></p><ul><li><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd[-g -d] 用户名</span><br></pre></td></tr></table></figure><ul><li>选项：-g，指定用户的组，不指定 -g，会创建同名组并自动加入，指定 -g 需要组已经存在，如已经存在同名组，必须使用-g</li><li>选项：-d，指定用户HOME路径，不指定，HOME目录默认在：/home/用户名</li></ul></li><li><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel[-r] 用户名</span><br></pre></td></tr></table></figure><ul><li>选项，-r，删除用户的HOME目录，不使用-r，删除用户时，HOME目录保留</li></ul></li><li><p>查看用户所属组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id[用户名]</span><br></pre></td></tr></table></figure><ul><li>参数：用户名，被查看的用户，如果不提供则查看自身</li></ul></li><li><p>修改用户所属组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG 用户组  用户名</span><br></pre></td></tr></table></figure><ul><li>将指定的用户加入指定的用户组</li></ul></li><li><p>查看当前系统中有哪里用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent passwd</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209204002664.png" alt="image-20241209204002664"></p></li></ul><p>共有7份信息，分别是：</p><p>用户名：密码(x)：用户ID：组ID：描述信息(无用)：HOME目录：执行终端(默认bash)</p><ul><li><p>查看当前系统中有哪些用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent group</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209204329211.png" alt="image-20241209204329211"></p></li></ul><p>包含3份信息</p><p>组名称：组认证（显示为x）：组ID</p><h1 id="查看权限管控"><a href="#查看权限管控" class="headerlink" title="查看权限管控"></a>查看权限管控</h1><h2 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h2><p>通过ls -l 可以以列表形式查看内容，并显示权限细节</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209205026322.png" alt="image-20241209205026322"></p><ul><li>序号1，表示文件、文件夹的权限控制信息</li><li>序号2，表示文件、文件夹所属用户</li><li>序号3，表示文件、文件夹所属用户组</li></ul><p>对序号1进行细节刨析</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209205228742.png" alt="image-20241209205228742"></p><p>举例：drwxr-xr-x，表示</p><ul><li>这是一个文件夹，首字母d表示</li><li>所属用户的权限是：有r有w有x，rwx</li><li>所属用户组的权限是：有r无w有x，r-x（- 表示无此权限）</li><li>其他用户的权限是：有r无w有x，r-x</li></ul><h3 id="rwx的意义"><a href="#rwx的意义" class="headerlink" title="rwx的意义"></a>rwx的意义</h3><ul><li>r 表示读权限</li><li>w 表示写权限</li><li>x 表示执行权限</li></ul><p>针对文件、文件夹的不同，rwx的含义有细微差别</p><ul><li>r，针对文件可以查看文件内容<ul><li>针对文件夹，可以查看文件夹内，如 ls 命令</li></ul></li><li>w，针对文件表示可以修改此文件<ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li>x，针对文件表示可以将文件作为程序执行<ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即 cd 进入</li></ul></li></ul><h2 id="修改权限控制-—chmod"><a href="#修改权限控制-—chmod" class="headerlink" title="修改权限控制 —chmod"></a>修改权限控制 —chmod</h2><p>我们可以通过chmod命令，修改文件、文件夹的权限信息。</p><p><strong>注意：只有文件、文件夹的所属用户或root用户可以修改</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] 权限 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项：-R，对文件夹内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li>chmod u=rwx,g=rx,o=x hello.txt    将文件权限修改为：rwxr-x–x<ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其他用户权限</li></ul></li><li>chmod -R u=rwx,g=rw,o=x  test     将文件夹test以及文件夹内全部内容权限设置为：rwxr-x–x</li></ul><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><p>权限可以用3为数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其他用户权限</p><p>数字的细节如下：r记为4，w记为2，x记为1.可以有：</p><p>0:无任何权限，即 —<br>1:仅有x权限即 –X<br>2:仅有w权限即 -W-<br>3:有w和x权限即-WX<br>4:仅有r权限即r–<br>5:有r和x权限lr-X<br>6:有r和w权限即 rw-<br>7:有全部权限即 rwX</p><h2 id="修改权限控制-—chown"><a href="#修改权限控制-—chown" class="headerlink" title="修改权限控制 —chown"></a>修改权限控制 —chown</h2><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p><strong>普通用户无法修改所属为其他用户或组，所以此命令之适用于root用户执行</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [-R][用户][:][用户组] 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项，-R，同chmod，对文件夹内全部内容应用相同规则</li><li>选项，用户，修改所属用户</li><li>选项，用户组，修改所属用户组</li><li>:   用于分隔用户和用户组</li></ul><p>示例：</p><ul><li>chown root hello.txt   将hello.txt所属用户修改为root</li><li>chown :root hello.txt   将hello.txt所属用户组修改为root</li><li>chown root :itheima hello.txt   将hello.txt所属用户修改为root，用户组修改为itheima</li><li>chown -R root test    将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;root用户&quot;&gt;&lt;a href=&quot;#root用户&quot; class=&quot;headerlink&quot; title=&quot;root用户&quot;&gt;&lt;/a&gt;root用户&lt;/h1&gt;&lt;p&gt;root（超级管理员）&lt;/p&gt;
&lt;p&gt;拥有最大的系统权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通用户的权限，一般在其</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux实用技巧</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2025-01-16T02:47:30.000Z</published>
    <updated>2025-01-16T02:47:49.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各类小技巧快捷键"><a href="#各类小技巧快捷键" class="headerlink" title="各类小技巧快捷键"></a>各类小技巧快捷键</h1><h2 id="ctrl-c-强制停止"><a href="#ctrl-c-强制停止" class="headerlink" title="ctrl + c 强制停止"></a>ctrl + c 强制停止</h2><ul><li><p>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键ctrl + c</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211163716231.png" alt="image-20241211163716231"></p></li><li><p>命令输入错误，也可以通过快捷键ctrl + c，退出当前输入，重新输入</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211163753714.png" alt="image-20241211163753714"></p><h2 id="ctrl-d-退出或登出"><a href="#ctrl-d-退出或登出" class="headerlink" title="ctrl + d 退出或登出"></a>ctrl + d 退出或登出</h2><ul><li><p>可以通过快捷键：ctrl  + d，退出账户的登录<img src="D:\学习资料\实验室培训\运维\image\image-20241211163913343.png" alt="image-20241211163913343"></p></li><li><p>或者退出某些特定程序的专属界面</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164020447.png" alt="image-20241211164020447"></p></li><li><p>注意：不能用于退出vi/vim</p></li></ul><h2 id="历史命令搜索"><a href="#历史命令搜索" class="headerlink" title="历史命令搜索"></a>历史命令搜索</h2><ul><li>可以通过<strong>history</strong>命令，查看历史输入过的命令</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164242301.png" alt="image-20241211164242301"></p><ul><li>可以通过<strong>：！命令前缀</strong>，自动执行上一次匹配前缀的命令</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164530545.png" alt="image-20241211164530545"></p><ul><li><p>可以通过快捷键<strong>：ctrl + r，输入内容去</strong>匹配历史命令</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241211164816228.png" alt="image-20241211164816228"></p><ul><li>如果搜索到的内容是你需要的，那么<ul><li>回车键可以直接执行</li><li>键盘左右键，可以得到此命令（不执行）</li></ul></li></ul></li></ul><h2 id="光标移动快捷键"><a href="#光标移动快捷键" class="headerlink" title="光标移动快捷键"></a>光标移动快捷键</h2><ul><li>ctrl + a，跳到命令开头</li><li>ctrl + e，跳到命令结尾</li><li>ctrl + 键盘左键，向左跳一个单词</li><li>ctrl+ 键盘右键，向右跳一个单词</li></ul><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul><li>通过快捷键ctrl+l，可以清空终端内容</li><li>或通过命令clear得到同样效果</li></ul><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h2><p>yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum[-y][install | remove | search] 软件名称</span><br></pre></td></tr></table></figure><ul><li><p>选项：-y，自动确认，无需手动安装或卸载过程</p></li><li><p>install：安装</p></li><li><p>remove：卸载</p></li><li><p>search：搜索</p><p>yum命令需要root权限，可以su切换到root，或使用sudo提权。</p><p>yum命令需要联网</p></li></ul><p><strong>Ubuntu</strong>中的安装软件</p><p>apt</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt [-y][jinstall | remove | search] 软件名称</span><br></pre></td></tr></table></figure><p>用法和yum一致，同样需要root权限</p><ul><li>install：安装</li><li>remove：卸载</li><li>search：搜索</li></ul><h1 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h1><p>Linux系统很多软件（内置或者第三方）均支持使用systemctl命令控制：启动、停止、开机自启动</p><p>能够被systemctl管理的软件，一般也称之为：服务</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start | stop | status | enable | disable 服务名</span><br></pre></td></tr></table></figure><ul><li>start 启动</li><li>stop 停止</li><li>status 查看状态</li><li>enable 开启开机自启</li><li>disable 关闭开机自启</li></ul><p>系统内置的服务比较多，比如：</p><ul><li>NetworkManager，主网络服务</li><li>network，副网络服务</li><li>firewalld，防火墙服务</li><li>sshd,ssh服务（FinalShell远程登陆Linux使用这个服务）</li></ul><p>除了内置的服务以外，部分第三方软件安装后也可以用systemctl进行控制</p><ul><li><p>yum install -y ntp，安装ntp软件</p><p>可以通过ntpd服务名，配合systemctl进行控制</p></li><li><p>yum install -y httpd，安装apache服务器软件</p></li></ul><p>可以通过httod服务名，配合systemctl进行控制</p><p><strong>部分软件安装后没有自动集成systemctl中，我们可以手动添加。</strong></p><h1 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h1><p>在系统中创建软链接，可以将文件、文件夹链接到其他位置。</p><p>类似windos系统中的《快捷方式》</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 参数1 参数2</span><br></pre></td></tr></table></figure><ul><li>-s选项，创建软连接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：要链接去的目的地</li></ul><p>例如：</p><ul><li>ln -s /etc/yum.conf~/yum.conf</li><li>ln -s /etc/yum~/yum</li></ul><h1 id="日期和时区"><a href="#日期和时区" class="headerlink" title="日期和时区"></a>日期和时区</h1><h2 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h2><p>通过date命令可以在命令行中查看系统的时间</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date[-d] [+格式化字符串]</span><br></pre></td></tr></table></figure><ul><li>-d 按照给定的字符串显示日期，一般用于日期计算</li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年</li><li>%y   年份后两位数组（00..99）</li><li>%m  月份（01..12）</li><li>%d  日（1..31）</li><li>%H  小时（00..23）</li><li>%M  分钟（00..59）</li><li>%S  秒（0..60）</li><li>%s  自1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li><li><p>使用date命令本体，无选项，直接查看时间<img src="D:\学习资料\实验室培训\运维\image\image-20241212213242505.png" alt="image-20241212213242505"></p></li><li><p>按照2022-01-01的格式显示日期<img src="D:\学习资料\实验室培训\运维\image\image-20241212213336915.png" alt="image-20241212213336915"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期<img src="D:\学习资料\实验室培训\运维\image\image-20241212213512411.png" alt="image-20241212213512411"></p></li></ul><ul><li><p>-d选项，可以按照给定的字符串显示日期，一般用于日期计算</p><p>| 命令                       | 描述             |<br>| ————————– | —————- |<br>| date -d “+1 day” +%Y%m%d   | 显示后一天的日期 |<br>| date -d “-1 day” +%Y%m%d   | 显示前一天的日期 |<br>| date -d “-1 month” +%Y%m%d | 显示上一月的日期 |<br>| date -d “+1 month” +%Y%m%d | 显示下一月的日期 |<br>| date -d “-1 year” +%Y%m%d  | 显示前一年的日期 |<br>| date -d “+1 year” +%Y%m%d  | 显示下一年的日期 |</p></li><li><p>其中支持的时间标记为</p><ul><li>year年</li><li>month月</li><li>day天</li><li>hour小时</li><li>minute分钟</li><li>second秒</li></ul></li><li><p>-d选项可以和格式化字符串配合一起使用</p></li></ul><h2 id="修改Linux时区"><a href="#修改Linux时区" class="headerlink" title="修改Linux时区"></a>修改Linux时区</h2><p>使用root权限，执行如下命令，修改时区为东八区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/localtime</span><br><span class="line">sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>将系统自带的localtime文件删除，        </p><p>并将/usr/share/zoneinfo/Asia/Shanghai文件链接为localtime文件即可</p><h2 id="ntp程序"><a href="#ntp程序" class="headerlink" title="ntp程序"></a>ntp程序</h2><p>我们可以通过ntp程序自动校准系统时间</p><p>安装ntp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure><p>启动并设置开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br></pre></td></tr></table></figure><p>当ntpd启动后，会定期的帮助我们联网校准系统的时间</p><ul><li><p>也可以手动校准（需要root权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u ntp.aliyun.com</span><br></pre></td></tr></table></figure><p>通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令自动校准</p></li></ul><h1 id="IP地址、主机名"><a href="#IP地址、主机名" class="headerlink" title="IP地址、主机名"></a>IP地址、主机名</h1><p>可以通过命令：ifconfig，查看本机的IP地址，如无法使用ifconfig命令，可以安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y stall net-tools</span><br></pre></td></tr></table></figure><h2 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h2><ul><li><p>127.0.0.1  这个IP地址用于指代<strong>本机</strong></p></li><li><p>0.0.0.0  ，特殊IP地址</p><ul><li>可以用于指代本机</li><li>可以在端口绑定中用来确定绑定关系</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示运行任意IP访问</li></ul></li></ul><h2 id="在Linux中修改主机名"><a href="#在Linux中修改主机名" class="headerlink" title="在Linux中修改主机名"></a>在Linux中修改主机名</h2><ul><li><p>可以使用命令：<strong>hostname</strong>查看主机名<img src="D:\学习资料\实验室培训\运维\image\image-20241215141050054.png" alt="image-20241215141050054"></p></li><li><p>可以使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名  </span><br></pre></td></tr></table></figure><p>修改主机名，需要root权限<img src="D:\学习资料\实验室培训\运维\image\image-20241215141301227.png" alt="image-20241215141301227"></p></li><li><p>重新登陆finalshell即可看到主机名已经正确显示<img src="D:\学习资料\实验室培训\运维\image\image-20241215141342728.png" alt="image-20241215141342728"></p></li></ul><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>用一个字符串来映射IP地址<img src="D:\学习资料\实验室培训\运维\image\image-20241215141739656.png" alt="image-20241215141739656"></p><p>即</p><ul><li>先查看本机的记录（私人地址本）<ul><li>windos看：C:\Windons\System32\drivers\rtc\hosts</li><li>Linux看：/etc/hosts</li></ul></li><li>再联网去DNS服务器（如114.114.114.114 ，8.8.8.8等）询问</li></ul><h2 id="配置主机名映射"><a href="#配置主机名映射" class="headerlink" title="配置主机名映射"></a>配置主机名映射</h2><p>在finalshell中，通过域名来连接服务器</p><p>只需要在windows系统的C:\Windons\System32\drivers\rtc\hosts文件中配置记录即可</p><h2 id="配置固定IP"><a href="#配置固定IP" class="headerlink" title="配置固定IP"></a>配置固定IP</h2><p>在VMware Workstation中配置固定IP</p><p>分为两个大步骤</p><p>1.在VMware Workstation中配置IP地址网关和网段（IP地址的范围）</p><p>2.在Linux系统中手动修改配置文件，固定IP</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144229908.png" alt="image-20241215144229908"></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144322628.png" alt="image-20241215144322628"></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144403367.png" alt="image-20241215144403367"></p><p>网关中的最后一组，一定要设置成2</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215144449500.png" alt="image-20241215144449500"></p><p>等号左右无空格</p><h1 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h1><h2 id="下载和网络请求"><a href="#下载和网络请求" class="headerlink" title="下载和网络请求"></a>下载和网络请求</h2><h3 id="ping命令检查服务器是否可联通"><a href="#ping命令检查服务器是否可联通" class="headerlink" title="ping命令检查服务器是否可联通"></a>ping命令检查服务器是否可联通</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ping[-c num] IP或者主机名</span><br></pre></td></tr></table></figure><ul><li>选项，-c，检查的次数，不使用-c选项，将无限次数持续检查</li><li>参数：IP或主机名，被检查的服务器的IP地址或主机名地址</li></ul><p>示例：</p><ul><li>检查到baidu.com是否联通<img src="D:\学习资料\实验室培训\运维\image\image-20241215155603874.png" alt="image-20241215155603874"></li></ul><p>结果表示联通，延迟在25ms左右</p><ul><li><p>检查到39.156.66.10是否联通，并检查3次</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215155824680.png" alt="image-20241215155824680"></p></li></ul><h3 id="wget命令下载文件"><a href="#wget命令下载文件" class="headerlink" title="wget命令下载文件"></a>wget命令下载文件</h3><p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget[-b] url</span><br></pre></td></tr></table></figure><ul><li>选项，-b，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li><li>参数，url，下载链接</li></ul><p>注意：无论下载是否完成，都会生成下载文件，如果下载未完成，及时删除下载文件</p><p>可以通过tail -f wget-log 命令持续跟踪监控后台下载</p><h3 id="curl命令发起网络请求"><a href="#curl命令发起网络请求" class="headerlink" title="curl命令发起网络请求"></a>curl命令发起网络请求</h3><p>curl命令口语发送http网络请求，可用于：下载文件、获取信息等</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [-O] url</span><br></pre></td></tr></table></figure><ul><li>选项，-O，<strong>用于下载文件</strong>，当url是下载链接是，可以使用此选项保存文件</li><li>参数，url，要发起请求的网络地址</li></ul><p>示例</p><ul><li>向cip.cc发起网络请求：curl cip.cc</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215160822627.png" alt="image-20241215160822627"></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>端口，是设备与外界通讯交流的出入口。端口可分为：物理端口和虚拟端口两类</p><ul><li><p>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等</p></li><li><p>虚拟端口：是指计算机内部的端口，是不可见的。用来操作系统和外部进行交互使用的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215161315020.png" alt="image-20241215161315020"></p></li></ul><p>计算机程序之间的通讯，通过IP只能锁定计算机，但是无法锁定具体的程序</p><p>通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通</p><p><strong>IP地址相当于小区地址，在小区内可以有许多住户（程序），而门牌号（端口）就是各个住户（程序）的联系地址</strong></p><p>Linux系统是一个超大号小区,可以支持65535个端口,这6万多个端口分为3类进行使用:</p><ul><li><strong>公认端口</strong>:1~1023,通常用于一些系统内置或知名程序的预留使用,如<strong>SSH服务的22端口</strong>,HTTPS服务的443端口非特殊需要，不要占用这个范围的端口</li><li><strong>注册端口</strong>:1024~49151,通常可以随意使用，用于松散的绑定一些程序\服务</li><li><strong>动态端口</strong>: 49152~65535,通常不会固定绑定程序,而是当程序对外进行网络链接时,用于临时使用。</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215162005041.png" alt="image-20241215162005041"></p><p>如图中，计算机A的微信连接计算机B的微信，A使用的50001即动态端口，临时找一个端口作为出口。计算机B的微信使用端口5678，即注册端口，长期绑定此端口等待别人连接</p><p>ps：上述微信的端口仅作演示，具体微信的端口使用非图中示意</p><h3 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h3><h4 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h4><p>使用nmap命令，查看指定IP地址对外暴露的端口</p><p>安装nmap：yum -y install nmap</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 被查看的IP地址</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215162521729.png" alt="image-20241215162521729"></p><p>可以看到本机(127.0.0.1)上有4个端口下载被程序占用了</p><p>其中：</p><ul><li>22端口，一般是SSH服务使用，即FinalShell远程连接Linux所使用的端口</li></ul><h4 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h4><ul><li>可以通过netstat命令，查看本机指定端口号的占用情况</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 端口号</span><br></pre></td></tr></table></figure><p>安装netstat：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install net-tools</span><br></pre></td></tr></table></figure><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215163545371.png" alt="image-20241215163545371"></p><p>可以看到，当前系统6000端口，无人使用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215163737586.png" alt="image-20241215163737586"></p><p>如图，可以看到当前系统22端口被程序（进程号1006）占用了</p><p>其中，0.0.0.0.22，表示端口绑定在0.0.0.0这个IP地址上，表示运行外部访问</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>程序运行在操作系统中，是被操作系统所管理的</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p><p>并会为每一个进程分配一个独有的：进程ID（进程号）</p><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><p>可以通过ps命令查看Linux系统中的进程信息</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps[-e -f]</span><br></pre></td></tr></table></figure><p>选项，-e，显示出全部的进程</p><p>选项，-f，以完全格式化的形式列出全部进程的全部信息</p><p>一般来说，固定用法就是：ps -ef 列出全部进程的全部信息</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215164719231.png" alt="image-20241215164719231"></p><p>从左到右分别是：</p><ul><li>UID：进程所属的用户ID</li><li>PIN：进程的进程号ID</li><li>PPID：进程的父ID（启动此进程的其他进程）</li><li>C：此进程的CPU占用率（百分比）</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程的终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用CPU的时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ul><h2 id="查看指定进程"><a href="#查看指定进程" class="headerlink" title="查看指定进程"></a>查看指定进程</h2><p>可以使用管道符配合grep来进行过滤，如：</p><p>ps -ef | grep tail ，即可准确的找到tail命令的信息</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215170019923.png" alt="image-20241215170019923"></p><ul><li>过滤不仅仅过滤名称，进程号、用户ID等等，都可以被grep过滤</li><li>如ps -ef | grep 30001，过滤带有30001关键字的进程信息（一般指代过滤30001进程号）</li></ul><h2 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h2><p>在Linux系统中，可以通过<strong>kill</strong>命令关闭进程</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [-9] 进程ID</span><br></pre></td></tr></table></figure><p>选项，-9，表示强制关闭进程。不使用此选项会向进程发送信号，要求其关闭，但是否关闭，需要看进程自身的处理机制</p><p>不加 -9，结束的时候，显示Terminated，自我结束</p><p>加-9，结束的时候，显示killed，表示强制结束</p><h1 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h1><h2 id="查看系统资源占用"><a href="#查看系统资源占用" class="headerlink" title="查看系统资源占用"></a>查看系统资源占用</h2><ul><li>可以通过top命令查看CPU、内存使用情况，类似Windows的任务管理器</li></ul><p>默认<strong>每5秒刷新</strong>一次，语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>按q或者ctrl + c退出</p><p><strong>top命令内容详解</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215171151137.png" alt="image-20241215171151137"></p><ul><li>第一行<img src="D:\学习资料\实验室培训\运维\image\image-20241215171209693.png" alt="image-20241215171209693"></li></ul><p>top：命令名称，17:10:44 ：当前系统时间，up 1:31 ：启动了1:31， 6users：6个用户登陆，load：1、5、15分钟的平均负载</p><ul><li>第二行<img src="D:\学习资料\实验室培训\运维\image\image-20241215171448304.png" alt="image-20241215171448304"></li></ul><p>Tasks:220个进程， 3running：3个子进程在运行，216sleeping：216个进程睡眠，0stopped：0个停止进程，1 zombie ：1个僵尸进程</p><ul><li>第三行<img src="D:\学习资料\实验室培训\运维\image\image-20241215214235602.png" alt="image-20241215214235602"></li></ul><p>%Cpu(s): CPU使用率, us:用户CPU使用率, sy:系统CPU使用率, ni:高优先级进程占用CPU时间百分比, id:空闲CPU率, wa:10等待CPU占用率, hi: CPU硬件中断率，si:CPU软件中断率, st:强制等待占用CPU率</p><ul><li>第四、五行<img src="D:\学习资料\实验室培训\运维\image\image-20241215214405683.png" alt="image-20241215214405683"></li></ul><p>Kib Mem: 物理内存, total: 总量, free:空闲, used:使用, buff/cache: buff和cache占用</p><p>Kibswap: 虚拟内存(交换空间), total:总量, free:空闲, used:使用, buff/cache: buff和cache占用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241215215316622.png" alt="image-20241215215316622"></p><ul><li>PID:进程id</li><li>USER:进程所属用户</li><li>PR:进程优先级，越小越高</li><li>NI:负值表示高优先级，正表示低优先级</li><li>VIRT:进程使用虚拟内存，单位KB</li><li>RES:进程使用物理内存，单位KB</li><li>SHR:进程使用共享内存，单位KB</li><li>S:进程状态(S休眠，R运行,Z僵死状态，N负数优先级，I空闲状态)</li><li>%CPU:进程占用CPU率</li><li>%MEM:进程占用内存率</li><li>TIME+: 进程使用CPU时间总计，单位10毫秒</li><li>COMMAND: 进程的命令或名称或程序文件路径</li></ul><h2 id="top命令选项"><a href="#top命令选项" class="headerlink" title="top命令选项"></a>top命令选项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选项 功能</span><br><span class="line">-P 只显示某个进程的信息</span><br><span class="line">-d 设置刷新时间，默认是5s</span><br><span class="line">-c 显示产生进程的完整命令，默认是进程名</span><br><span class="line">-n 指定刷新次数，比如top-n 3，刷新输出3次后退出</span><br><span class="line">-b 以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如 top -b -n 3 &gt; /tmp/top.tmp</span><br><span class="line">-i 不显示任何闲置(idle)或无用(zombie)的进程</span><br><span class="line">-u 查找特定用户启动的进程</span><br></pre></td></tr></table></figure><h2 id="top交互式选项"><a href="#top交互式选项" class="headerlink" title="top交互式选项"></a>top交互式选项</h2><p>当top以交互式运行（非-b选项启动），可以用一下交互式命令进行控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">按键   功能</span><br><span class="line"></span><br><span class="line">h键   按下h键,会显示帮助画面</span><br><span class="line"></span><br><span class="line">c键   按下c键,会显示产生进程的完整命令,等同于-c参数,再次按下c键,变为默认显示</span><br><span class="line"></span><br><span class="line">f键   按下f键,可以选择需要展示的项目,按下空格前面带*后，表示显示。q（或ESC）表示退出</span><br><span class="line"></span><br><span class="line">M键   按下M键,根据驻留内存大小(RES)排序</span><br><span class="line"></span><br><span class="line">P键   按下P键,根据CPU使用百分比大小进行排序</span><br><span class="line"></span><br><span class="line">T键   按下T键,根据时间/累计时间进行排序</span><br><span class="line"></span><br><span class="line">E键   按下E键,切换顶部内存显示单位</span><br><span class="line"></span><br><span class="line">e键   按下e键,切换进程内存显示单位</span><br><span class="line"></span><br><span class="line">1键   按下1键,切换显示平均负载和启动时间信息。</span><br><span class="line"></span><br><span class="line">i键   按下i键,不显示闲置或无用的进程,等同于-i参数,再次按下,变为默认显示</span><br><span class="line"></span><br><span class="line">t键   按下t键,切换显示CPU状态信息</span><br><span class="line"></span><br><span class="line">m键   按下m键,切换显示内存信息</span><br></pre></td></tr></table></figure><h2 id="磁盘信息监控"><a href="#磁盘信息监控" class="headerlink" title="磁盘信息监控"></a>磁盘信息监控</h2><ul><li>使用df命令，可以查看硬盘的使用情况</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[-h]</span><br></pre></td></tr></table></figure><p>选项，-h，以更加人性化的单位显示<img src="D:\学习资料\实验室培训\运维\image\image-20241216130002574.png" alt="image-20241216130002574"></p><ul><li>可以使用iostat查看CPU、磁盘的相关信息</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat[-x][num1][num2]</span><br></pre></td></tr></table></figure><ul><li>选项：-x，显示更多信息</li><li>num1：数字，刷新间隔，num2：数字，刷新几次</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216130922091.png" alt="image-20241216130922091"></p><p>tps：该设备每秒的传输次数（Indicate the number of transfers per second thai were issued to the device.）一次传输的意思是“一次I/O请求”。多个逻辑情趣可能会被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。</p><ul><li>使用-x选项，显示更多信息</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216131649762.png" alt="image-20241216131649762"></p><p>从左到右：</p><p>rrqm/s:   </p><p>每秒这个设备相关的读取请求有多少被Merge了(当系统调用需要读取数据的时候,VFS将请求发到各个FS,如果FS发现不同的读取请求读取的是相同Block的数据,FS会将这个请求合并Merge,提高I0利用率,避免重复调用);</p><p>wrqm/s:<br>每秒这个设备相关的写入请求有多少被Merge了。</p><p>rsec/s:</p><p>每秒读取的扇区数;sectors</p><p>wsec/:</p><p>每秒写入的扇区数。</p><p><strong>rKB/s:</strong></p><p><strong>每秒发送到设备的读取请求数</strong></p><p><strong>wKB/S:</strong></p><p><strong>每秒发送到设备的写入请求数</strong></p><p>avgrq-sz：</p><p>平均请求扇区的大小</p><p>avgqu-sz：</p><p>平均请求队列的长度。毫无疑问，队列长度越短越好。</p><p>await:</p><p>每一个IO请求的处理的平均时间(单位是微秒毫秒)。</p><p>svctm：</p><p>表示平均每次设备I/O操作的服务时间(以毫秒为单位)</p><p><strong>%util:</strong></p><p><strong>磁盘利用率</strong></p><h2 id="网络状态监控"><a href="#网络状态监控" class="headerlink" title="网络状态监控"></a>网络状态监控</h2><ul><li>可以使用sar命令查看网络的相关统计（sar命令十分复杂，目前仅简单用于统计网络）</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar -n DEV num1 num2</span><br></pre></td></tr></table></figure><p>选项：-n，查看网络，DEV表示查看网络接口</p><p>num1：刷新间隔（不填就查看一次结束） </p><p>num2：查看次数（不填无限次数）</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216132905028.png" alt="image-20241216132905028"></p><p>信息解读：</p><ul><li>IFACE：本地网卡接口的名称</li><li>rxpck/s：每秒钟接受的数据包</li><li>txpck/s：每秒钟发送的数据包</li><li><strong>rxKB/s：每秒钟接受的数据包大小，单位为KB</strong></li><li><strong>txKB/s：每秒钟发送的数据包大小，单位为KB</strong></li><li>rxcmp/s：每秒钟接受的压缩数据包</li><li>txcmp/s：每秒钟发送的压缩包</li><li>rxmcst/s：每秒钟接收的多播数据包</li></ul><h1 id="环境变量PATH"><a href="#环境变量PATH" class="headerlink" title="环境变量PATH"></a>环境变量PATH</h1><h2 id="环境变量作用"><a href="#环境变量作用" class="headerlink" title="环境变量作用"></a>环境变量作用</h2><p>环境变量是操作系统在运行的时候，记录的一些关键性信息，用以辅助系统运行。</p><p>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种KeyValue型结构，如：<img src="D:\学习资料\实验室培训\运维\image\image-20241216145304856.png" alt="image-20241216145304856"></p><p>图中记录了：</p><ul><li>HOME：/root，用户的HOME路径</li><li>USER: root，当前的操作用户</li><li>PWD：当前工作路径</li><li>…</li></ul><p>等等一系列信息，用于辅助系统在运行的时候从环境变量中获取关键信息</p><p>无论当前工作目录是什么，都能执行/usr/bin/cd这个程序，这个就是借助环境变量中：PATH这个项目的值来做到的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216145905838.png" alt="image-20241216145905838"></p><p>PATH记录了系<strong>统执行任何命令的搜索路径，</strong>如上图记录了（<strong>路径之间以：隔开</strong>）</p><ul><li>/usr/local/sbin</li><li>/usr/local/bin</li><li>/sbin/</li><li>/bin</li><li>/usr/sbin</li><li>/usr/bin</li><li>/root/bin</li></ul><p>当执行任何命令时，都会按照顺序，从上述路径中搜索要执行的程序的本体。</p><p>比如执行cd命令，就从第二个目录/usr/bin中搜索到了cd命令，并执行</p><h2 id="符号-的作用"><a href="#符号-的作用" class="headerlink" title="符号$的作用"></a>符号$的作用</h2><p>在Linux系统中，$符号被用于取”变量“的值。</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。</p><p>取得环境变量的值就可以通过语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$环境变量名</span><br></pre></td></tr></table></figure><p>来取得</p><p>比如：echo $PATH</p><p>就可以取得PATH这个环境变量的值，并通过echo语句输出出来</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216151334129.png" alt="image-20241216151334129"></p><p>又或者：echo ${PATH}ABC</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241216151611813.png" alt="image-20241216151611813"></p><p>当和其他内容混合在一起的时候，可以通过{}来标注取的变量是谁</p><h2 id="在Linux中配置环境变量"><a href="#在Linux中配置环境变量" class="headerlink" title="在Linux中配置环境变量"></a>在Linux中配置环境变量</h2><h3 id="Linux环境变量可以用户自行设置"><a href="#Linux环境变量可以用户自行设置" class="headerlink" title="Linux环境变量可以用户自行设置"></a>Linux环境变量可以用户自行设置</h3><p>其中分为：</p><ul><li><p>临时设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">export 变量名=变量值</span><br></pre></td></tr></table></figure></li><li><p>永久生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·针对当前用户生效，配置在当前用户的：~/.bashrc文件中</span><br><span class="line">·针对所有用户生效，配置在系统中：/etc/profile文件中</span><br><span class="line">·并通过语法：source 配置文件 ，进行立刻生效，或重新登陆FinalShell生效</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义环境变量PATH"><a href="#自定义环境变量PATH" class="headerlink" title="自定义环境变量PATH"></a>自定义环境变量PATH</h3><p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。</p><p>这些搜索路径我们也可以自行添加到PATH中去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:自定义路径</span><br></pre></td></tr></table></figure><h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><p>在Finalshell软件的下方窗体中，提供了Liunx的文件系统视图，可以方便的上传和下载：</p><ul><li>在Finalshell中浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</li><li>浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241218164621375.png" alt="image-20241218164621375"></p><h2 id="rz、sz命令"><a href="#rz、sz命令" class="headerlink" title="rz、sz命令"></a>rz、sz命令</h2><p>可以通过rz、sz命令进行文件传输</p><p>安装语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure><ul><li><p>rz命令，进行上传，语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure></li><li><p>sz命令下载，语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz 要下载的文件</span><br></pre></td></tr></table></figure><p>文件会自动下载到桌面的：fsdownload文件夹中</p></li></ul><h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><h2 id="tar命令压缩或解压tar或gzip文件"><a href="#tar命令压缩或解压tar或gzip文件" class="headerlink" title="tar命令压缩或解压tar或gzip文件"></a>tar命令压缩或解压tar或gzip文件</h2><p>Linux和Mac系统常用有2种压缩格式，后缀分别是：</p><ul><li>.tar，称之为tarball，<strong>归档</strong>文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li>.gz，也常见为.tar.gz，.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><p>针对这两种格式，使用tar命令均可以进行压缩和解压的操作</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [-c -v -x -f -z -C]参数1 参数2 ... 参数N</span><br></pre></td></tr></table></figure><ul><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z，gzip模式，不使用-z就是普通的tarball格式</li><li>-C，选择解压的目的地，用于解压模式</li></ul><h3 id="tar命令压缩"><a href="#tar命令压缩" class="headerlink" title="tar命令压缩"></a>tar命令压缩</h3><p>tar的常用组合为：</p><ul><li>tar -cvf test.tar 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar文件内</p><ul><li>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</p><p>注意：</p><ul><li>-z选项，如果使用的话，一般处于选项位第一个</li><li>-f选项，<strong>必须</strong>在选项位最后一个</li></ul><h3 id="tar解压"><a href="#tar解压" class="headerlink" title="tar解压"></a>tar解压</h3><p>常用的tar解压组合有：</p><ul><li>tar -xvf test.tar</li></ul><p>解压test.tar，将文件解压至当前目录</p><ul><li>tar -xvf test.tar -C /home/itheima</li></ul><p>解压test.tar，将文件解压至指定目录（/home/itheima）</p><ul><li>tar -zxvf test.tar.gz，将文件解压到指定目录（/home/itheima）</li></ul><p>注意：</p><ul><li>-f选项，必须在选项组合体的组后一位</li><li>-z选项，建议在开头位置</li><li>-C选项单独使用，和解压所需的其他参数分开</li></ul><h2 id="zip、unzip命令压缩或解压zip文件"><a href="#zip、unzip命令压缩或解压zip文件" class="headerlink" title="zip、unzip命令压缩或解压zip文件"></a>zip、unzip命令压缩或解压zip文件</h2><h3 id="zip命令压缩文件"><a href="#zip命令压缩文件" class="headerlink" title="zip命令压缩文件"></a>zip命令压缩文件</h3><p>可以使用zip命令，压缩文件位zip压缩包</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip [-r] 参数0 参数1 参数2 ... 参数N</span><br></pre></td></tr></table></figure><ul><li>-r，被压缩的包含文件夹的时候，需要使用-r选项，和rm，cp等命令的-r效果一致</li><li>参数0，是创建的压缩包的名字，后面的参数是被压缩的文件</li></ul><p>如：</p><ul><li>zip test.zip a.txt b.txt c.txt</li></ul><p>将a.txt b.txt c.txt压缩到test.zip文件内</p><ul><li>zip -r test.zip test itheima a.txt</li></ul><p>将test、itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p><h3 id="unzip命令解压文件"><a href="#unzip命令解压文件" class="headerlink" title="unzip命令解压文件"></a>unzip命令解压文件</h3><p>使用unzip命令，可以方便的解压zip压缩包</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip [-d] 参数</span><br></pre></td></tr></table></figure><ul><li>-d，指定要解压去的位置，同tar的-C选项</li><li>参数，被解压的zip压缩包文件</li></ul><p>示例：</p><ul><li>unzip test.zip   将test.zip解压到当前目录</li><li>unzip test.zip -d /home/itheima，将test.zip解压到指定文件夹内（/home/itheima）</li></ul><p>注意：</p><p><strong>解压的时候，同名文件会被覆盖</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各类小技巧快捷键&quot;&gt;&lt;a href=&quot;#各类小技巧快捷键&quot; class=&quot;headerlink&quot; title=&quot;各类小技巧快捷键&quot;&gt;&lt;/a&gt;各类小技巧快捷键&lt;/h1&gt;&lt;h2 id=&quot;ctrl-c-强制停止&quot;&gt;&lt;a href=&quot;#ctrl-c-强制停止&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="https://a1smile.github.io/blog/2025/01/16/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>https://a1smile.github.io/blog/2025/01/16/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2025-01-16T02:46:06.000Z</published>
    <updated>2025-01-16T02:46:54.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h1><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208142013596.png" alt="image-20241208142013596"></p><p>只有一个树形结构</p><p>根目录为‘/’，所有的文件都在它下面</p><p>注意：开头的/表示根目录</p><p>后面的/表示层级关系</p><h6 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a><strong>远程连接</strong></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在虚拟机终端中输入：ifconfig</span><br><span class="line">找到end33中的IP地址</span><br><span class="line">在FinalShell中链接虚拟机</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="命令与命令行的区别"><a href="#命令与命令行的区别" class="headerlink" title="命令与命令行的区别"></a>命令与命令行的区别</h6><p>学习Linux，本质上是学习在命令行下熟练使用Linux的各类命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行：即Linux终端（Terminal），是一种命令提示符页面。以纯“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：即Linuxc程序。一个命令就是一个Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</span><br></pre></td></tr></table></figure><h6 id="命令的通用格式"><a href="#命令的通用格式" class="headerlink" title="命令的通用格式"></a>命令的通用格式</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conmmand [-options] [parameter]</span><br><span class="line">·command:命令本身</span><br><span class="line">·options:[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</span><br><span class="line">·parameter：[可选，非必填]命令的参数。多数用于命令的指向目标等</span><br><span class="line">语法中的[]表示可选的意思</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">·ls -l/home/itheima     ls是命令本身，-l是选项，/home/itheima是参数</span><br><span class="line">·意思是：以列表的形式，显示/home/itheima目录内的内容</span><br><span class="line">·cp -r test1 test2     cp是命令本身，-r是选项，test1和test2是参数</span><br><span class="line">·意思是：复制文件夹test1 成为test2</span><br></pre></td></tr></table></figure><h1 id="命令基础"><a href="#命令基础" class="headerlink" title="命令基础"></a>命令基础</h1><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><h3 id="ls命令基本定义"><a href="#ls命令基本定义" class="headerlink" title="ls命令基本定义"></a>ls命令基本定义</h3><p>ls命令的作用是在命令行中，以平铺的形式，展示当前工作目录（默认HOME目录）下的内容（文件或者文件夹），语法细节如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls[-a -l -h][Linux路径]</span><br></pre></td></tr></table></figure><ul><li><p>-a  -l  -h 是<strong>可选</strong>的选项</p></li><li><p>Linux路径是此命令<strong>可选</strong>的参数</p></li></ul><p>当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出<strong>当前工作目录</strong>下的内容</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208143245339.png" alt="image-20241208143245339"></p><p><strong>注意：</strong></p><p>Linux系统的命令行终端，在启动的时候，默认会加载：</p><ul><li><p>当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的是HOME目录的内容</p></li><li><p>HOME目录：每个Linux操作用户在Linux系统的<strong>个人账户目录</strong>（专属目录），路径在：/home/用户名</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">·如，图中的Linux用户是daihongsong，其HOME目录是：/home/daihongsong</span><br><span class="line">·Windows系统和Linux系统。均设有用户的HOME目录</span><br></pre></td></tr></table></figure><h3 id="ls命令的参数"><a href="#ls命令的参数" class="headerlink" title="ls命令的参数"></a>ls命令的参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls[-a -l -h][Linux路径]</span><br></pre></td></tr></table></figure><ul><li><p>当ls不使用参数，表示列出：当前工作目录的内容，即用户的HOME目录。</p></li><li><p>当使用参数。ls命令的参数表示：指定一个Linux路径，列出指定路径的内容</p></li></ul><p>如：</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208144746163.png" alt="image-20241208144746163"></p><p>通过ls / 列出根目录的内容</p><h3 id="ls命令的-a选项"><a href="#ls命令的-a选项" class="headerlink" title="ls命令的 -a选项"></a>ls命令的 -a选项</h3><p>-a 选项，表示all的意思，即列出全部文件（包含隐藏的文件/文件夹）</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208144955840.png" alt="image-20241208144955840"></p><p>可以看到，ls -a 对比 ls 列出的内容更多。</p><ul><li><p>图中以 . 开头的，表示是Linux系统的隐藏文件/文件夹（只要以 . 开头，就自动隐藏）</p></li><li><p>只有通过 -a 选项，才能看到这些隐藏的文件/文件夹</p></li></ul><h3 id="ls命令的-l-选项"><a href="#ls命令的-l-选项" class="headerlink" title="ls命令的 -l 选项"></a>ls命令的 -l 选项</h3><ul><li>-l 选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208145714564.png" alt="image-20241208145714564"></p><h4 id="ls选项可以混合使用"><a href="#ls选项可以混合使用" class="headerlink" title="ls选项可以混合使用"></a>ls选项可以混合使用</h4><p>如： -a 和 -l 可以组合应用</p><p>写法： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·ls -l-a</span><br><span class="line">·ls -la</span><br><span class="line">·ls -al</span><br></pre></td></tr></table></figure><p>三种写法都是一样的</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150011375.png" alt="image-20241208150011375"></p><h4 id="ls选项和参数的组合使用"><a href="#ls选项和参数的组合使用" class="headerlink" title="ls选项和参数的组合使用"></a>ls选项和参数的组合使用</h4><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150105486.png" alt="image-20241208150105486"></p><h3 id="ls命令的-h选项"><a href="#ls命令的-h选项" class="headerlink" title="ls命令的 -h选项"></a>ls命令的 -h选项</h3><ul><li><p>-h 表示以易于阅读的形式，列出文件大小，如K, M , G</p></li><li><p>-h 选项必须要搭配 -l 一起使用 </p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208150518225.png" alt="image-20241208150518225"></p><h2 id="目录切换相关命令（cd-pwd）"><a href="#目录切换相关命令（cd-pwd）" class="headerlink" title="目录切换相关命令（cd / pwd）"></a>目录切换相关命令（cd / pwd）</h2><h3 id="cd命令-切换工作目录"><a href="#cd命令-切换工作目录" class="headerlink" title="cd命令 切换工作目录"></a>cd命令 切换工作目录</h3><p>cd命令来自英文：Change Directory</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd[Linux路径]</span><br></pre></td></tr></table></figure><ul><li><p>cd命令无需选项，只有参数，表示要切换到哪个目录下</p></li><li><p>cd命令直接执行，不写参数，表示返回到用户的HOME目录</p></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208151406232.png" alt="image-20241208151406232"></p><h3 id="pwd命令查看当前工作目录"><a href="#pwd命令查看当前工作目录" class="headerlink" title="pwd命令查看当前工作目录"></a>pwd命令查看当前工作目录</h3><p>通过ls来验证当前的工作目录，其实是不恰当的</p><p>我们可以通过pwd命令，来查看当前所在的工作目录</p><p>pwd命令来自：Print Work Directory</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><ul><li>pwd命令，无选项，无参数，直接输入pwd即可</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208151823741.png" alt="image-20241208151823741"></p><h2 id="相对路径、绝对路径和特殊路径符"><a href="#相对路径、绝对路径和特殊路径符" class="headerlink" title="相对路径、绝对路径和特殊路径符"></a>相对路径、绝对路径和特殊路径符</h2><p><strong>比如进入Desktop</strong></p><p><strong>· cd Desktop     相对路径写法</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208152751806.png" alt="image-20241208152751806"></p><p><strong>·cd/home/daihongsong/Desktop  绝对路径写法</strong></p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208152905027.png" alt="image-20241208152905027"></p><h3 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a><strong>相对路径</strong>：</h3><p>以<strong>当前目录为起点</strong>，描述路径的一种写法，路径描述<strong>无需</strong>以 / 开头</p><h3 id="绝对路径："><a href="#绝对路径：" class="headerlink" title="绝对路径："></a><strong>绝对路径</strong>：</h3><p>以<strong>根目录为起点</strong>，描述路径的一种写法，路径描述以 / 开头</p><h3 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.    表示当前目录。比如cd ./Desktop表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..   表示上一级目录，比如：cd .. 即可切换到上一级目录，cd ../..切换到上二级的目录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~    表示HOME目录，比如cd ~    即可切换到HOME目录或cd~/Desktop，切换到HOME内的Desktop目录</span><br></pre></td></tr></table></figure><h2 id="mkdir命令创建目录（文件夹）"><a href="#mkdir命令创建目录（文件夹）" class="headerlink" title="mkdir命令创建目录（文件夹）"></a>mkdir命令创建目录（文件夹）</h2><p>mkdir来自英文：<strong>M</strong>a<strong>k</strong>e <strong>Dir</strong>ectory</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-p] Linux路径</span><br></pre></td></tr></table></figure><p>· 参数<strong>必填</strong> 。表示Linux路径，即要创建的文件夹的路径，相对路径和绝对路径均可</p><p>· -p选项<strong>可选</strong>，表示<strong>自动创建不存在的父目录</strong>，适用于创建<strong>连续多层级</strong>的目录</p><p>注意：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作，涉及到权限问题，HOME外无法成功</p><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="touch命令创建文件"><a href="#touch命令创建文件" class="headerlink" title="touch命令创建文件"></a>touch命令创建文件</h3><p>可以通过touch命令创建文件</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch Linux路径</span><br></pre></td></tr></table></figure><p>·touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208161510800.png" alt="image-20241208161510800"></p><h4 id="文件夹和文件的分辨"><a href="#文件夹和文件的分辨" class="headerlink" title="文件夹和文件的分辨"></a>文件夹和文件的分辨</h4><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208161628202.png" alt="image-20241208161628202"></p><p>第一列中   d   开头的是文件夹</p><p>-开头是文件</p><h3 id="cat命令查看文件内容"><a href="#cat命令查看文件内容" class="headerlink" title="cat命令查看文件内容"></a>cat命令查看文件内容</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Linux路径</span><br></pre></td></tr></table></figure><ul><li>cat没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208162405365.png" alt="image-20241208162405365"></p><h3 id="more命令查看文件内容"><a href="#more命令查看文件内容" class="headerlink" title="more命令查看文件内容"></a>more命令查看文件内容</h3><p>同cat的区别：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more Linux路径</span><br></pre></td></tr></table></figure><ul><li><p>没有选项，只有必填参数：被查看的文件路径，相对、绝对、特殊路径符都可以使用</p></li><li><p>在查看的过程中，通过<strong>空格</strong>翻页</p></li><li>通过 q 退出查看</li></ul><h3 id="cp命令-复制文件-文件夹"><a href="#cp命令-复制文件-文件夹" class="headerlink" title="cp命令 复制文件/文件夹"></a>cp命令 复制文件/文件夹</h3><p>cp命令可以用于复制文件、文件夹</p><p>cp命令来自于：<strong>c</strong>o<strong>p</strong>y</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [-r] 参数1 参数2</span><br></pre></td></tr></table></figure><ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件/文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li></ul><h3 id="mv命令移动文件-文件夹"><a href="#mv命令移动文件-文件夹" class="headerlink" title="mv命令移动文件/文件夹"></a>mv命令移动文件/文件夹</h3><p>mv命令可以用于移动文件/文件夹</p><p>mv命令来自：<strong>m</strong>o<strong>v</strong>e</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 参数1  参数2</span><br></pre></td></tr></table></figure><ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，<strong>确保目标存在</strong></li></ul><h3 id="rm删除文件-文件夹"><a href="#rm删除文件-文件夹" class="headerlink" title="rm删除文件/文件夹"></a>rm删除文件/文件夹</h3><p>rm命令可以用于删除文件/文件夹</p><p>rm命令来自：<strong>r</strong>e<strong>m</strong>ove</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [-r -f] 参数1 参数2 ...... 参数N </span><br></pre></td></tr></table></figure><ul><li>同cp命令一样，-r 选项用于删除文件夹</li><li>-f  表示force，强制删除（不会弹出提示确认信息）<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li><li>使用一般用户用不到-f 选项</li></ul></li><li>参数1、 参数2、 …… 、参数N   表示要删除的文件/文件夹路径，按照空格隔开</li></ul><h4 id="rm命令-通配符"><a href="#rm命令-通配符" class="headerlink" title="rm命令-通配符"></a>rm命令-通配符</h4><p>rm命令支持通配符*，用来做<strong>模糊匹配</strong></p><ul><li>符号 * 表示通配符，即匹配任意内容（包含空），示例：</li><li>test*，表示匹配任何<strong>以test开头</strong>的内容</li><li>*test，表示匹配任何<strong>以test结尾</strong>的内容</li><li><em>test </em>，表示匹配任何<strong>包含test</strong>的内容 </li></ul><h4 id="强制删除-f选项"><a href="#强制删除-f选项" class="headerlink" title="强制删除 -f选项"></a>强制删除 -f选项</h4><ul><li>可以通过su - root，并输入密码（和普通用户默认一样）临时切换到root用户体验</li><li>通过输入 exit 命令，返回普通用户</li></ul><p>rm是一个危险的命令，特别是在处于root（超级管理员）用户的时候，要谨慎使用。</p><p><strong>如下命令，千万不要在root管理员用户下执行：</strong></p><p><strong>rm -rf/</strong></p><p><strong>rm -rf/*</strong></p><p><strong>效果等同于在Windows上执行C盘格式化</strong></p><h3 id="查找命令（which-find）"><a href="#查找命令（which-find）" class="headerlink" title="查找命令（which , find）"></a>查找命令（which , find）</h3><h4 id="which命令-查命令"><a href="#which命令-查命令" class="headerlink" title="which命令 查命令"></a>which命令 查命令</h4><p>Linux命令的本体就是一个个的二进制可执行程序</p><p>和Windows系统中的.exe文件是一个意思</p><p>我们可以通过which命令，查看所使用的一系列命令的程序文件存放的位置</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which 要查找的命令</span><br></pre></td></tr></table></figure><h4 id="find命令-查文件"><a href="#find命令-查文件" class="headerlink" title="find命令 查文件"></a>find命令 查文件</h4><p>通过find命令去搜索指定的文件</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 起始路径  -name “被查找文件名”</span><br></pre></td></tr></table></figure><p>为了确保拥有最大的权限，可以在整个系统完成搜索，可以临时切换到root用户来获得管理员权限</p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>根据语法 ： <strong>find 起始路径 -name “被查找文件名”</strong></p><p>被查找文件名，支持使用通配符*来做模糊查询</p><ul><li>符号 * 表示通配符，即匹配任意内容（包含空），示例：</li><li>test*，表示匹配任何<strong>以test开头</strong>的内容</li><li>*test，表示匹配任何<strong>以test结尾</strong>的内容</li><li><em>test </em>，表示匹配任何<strong>包含test</strong>的内容 </li></ul><p>基于通配符的含义，可以结合find命令做文件的模糊查询</p><h5 id="find命令-按文件大小查找文件"><a href="#find命令-按文件大小查找文件" class="headerlink" title="find命令-按文件大小查找文件"></a>find命令-按文件大小查找文件</h5><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 起始路径 -size +|-n[kMG]</span><br></pre></td></tr></table></figure><ul><li>+、- 表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">·查找小于10kB的文件：find/ -size -10k</span><br><span class="line">·查找大于100MB的文件：find/ -size +100M</span><br><span class="line">·查找大于1GB的文件：find/ -size +1G</span><br></pre></td></tr></table></figure><p>ctrl + c 强制停止搜索</p><h3 id="grep、wc和管道符"><a href="#grep、wc和管道符" class="headerlink" title="grep、wc和管道符"></a>grep、wc和管道符</h3><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p>可以通过grep命令，从文件中通过关键字过滤文件行</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-n] 关键字 文件路径</span><br></pre></td></tr></table></figure><ul><li>选项 -n ，可选，表示在结果中显示匹配的行的行号</li><li>参数、关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用“ ”将关键字包围起来</li><li>参数、文件路径，必填，表示要过滤内容的文件路径，<strong>可作为内容输入端口</strong></li></ul><h4 id="wc命令-做数量统计"><a href="#wc命令-做数量统计" class="headerlink" title="wc命令 做数量统计"></a>wc命令 做数量统计</h4><p>可以通过wc命令统计文件的行数、单词数量等</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc[-c -m -l -w] 文件路径</span><br></pre></td></tr></table></figure><ul><li>选项，-c ，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l ， 统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，<strong>可以作为内容输入端口</strong>（可以做管道符的输入）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不加选项时，输出：</span><br><span class="line">行数  单词数 字节数 文件路径</span><br></pre></td></tr></table></figure><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符   |"></a>管道符   |</h4><p>含义：将管道符左边命令的结果，作为右边命令的输入</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208214214600.png" alt="image-20241208214214600"></p><p>如上图：</p><ul><li>cat test.txt的输出结果（文件内容）</li><li>作为右边grep命令的输入（被过滤文件）</li></ul><p>管道符可以进行嵌套</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208215252494.png" alt="image-20241208215252494"></p><h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>可以使用echo命令在命令行内输出指定内容</p><p>类似于编程中的print语句</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 输出的内容</span><br></pre></td></tr></table></figure><ul><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用“ ”包围</li><li>在终端上显示：Hello Linux</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208215847459.png" alt="image-20241208215847459"></p><ul><li><ul><li>带有空格或 \ 等特殊符号，建议使用双引号包围</li><li>因为不包围的话，空格后容易被识别为参数2，尽管echo不受影响，但要养成习惯</li></ul></li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220245400.png" alt="image-20241208220245400"></p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号 `"></a>反引号 `</h3><p>如下的命令：echo pwd</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220511294.png" alt="image-20241208220511294"></p><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了。</p><p>我们可以通过命令用反引号（通常也称之为飘号）` 将其包围</p><p>被 ` 包围的内容，会被作为命令执行，而非普通字符</p><p><img src="D:\学习资料\实验室培训\运维\image\image-20241208220702778.png" alt="image-20241208220702778"></p><h3 id="重定向符-gt-和-gt-gt"><a href="#重定向符-gt-和-gt-gt" class="headerlink" title="重定向符 &gt;和&gt;&gt;"></a>重定向符 &gt;和&gt;&gt;</h3><ul><li>“&gt;”。将左侧命令的结果，<strong>覆盖</strong>写入到符号右侧指定的文件中</li><li>“&gt;&gt;”，将左侧命令的结果，<strong>追加</strong>写入到符号右侧指定的文件中</li></ul><p>演示：</p><ul><li>echo “Hello Linux” &gt; itheima.txt</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000029623.png" alt="image-20241209000029623"></p><ul><li>echo”Hello itheima” &gt; itheima.txt ，再次执行。覆盖新内容</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000127248.png" alt="image-20241209000127248"></p><ul><li>echo”Hello itcast” &gt;&gt; itheima.txt，再次执行，使用&gt;&gt;追加新内容</li></ul><p><img src="D:\学习资料\实验室培训\运维\image\image-20241209000214393.png" alt="image-20241209000214393"></p><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-f -num] Linux路径</span><br></pre></td></tr></table></figure><ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持续跟踪</li><li>选项，-num（填具体查看行数），表示查看尾部多少行，不填默认10行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;D:&#92;学习资料&#92;实验室培训&#92;运维&#92;image&#92;image-202412</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My First Post</title>
    <link href="https://a1smile.github.io/blog/2025/01/15/My-First-Post/"/>
    <id>https://a1smile.github.io/blog/2025/01/15/My-First-Post/</id>
    <published>2025-01-15T03:44:38.000Z</published>
    <updated>2025-01-15T03:44:38.453Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://a1smile.github.io/blog/2025/01/15/hello-world/"/>
    <id>https://a1smile.github.io/blog/2025/01/15/hello-world/</id>
    <published>2025-01-15T03:10:51.706Z</published>
    <updated>2025-01-15T03:00:07.609Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
